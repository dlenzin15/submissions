
DA3_Task1B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099e  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a5  00000000  00000000  000014fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000017a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00001c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001cbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_13>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 98 00 	call	0x130	; 0x130 <main>
  d4:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_13>:

#define TCNT1L_VALUE 0x06
#define TCNT1H_VALUE 0xFF

ISR(TIMER1_OVF_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	static int overflows = 0;	//Counter to track to overflows
	overflows++;
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (overflows >= 1000)		//1000 overflows is approximately 1 second
  fe:	88 3e       	cpi	r24, 0xE8	; 232
 100:	93 40       	sbci	r25, 0x03	; 3
 102:	44 f0       	brlt	.+16     	; 0x114 <__vector_13+0x38>
	{
		PORTB ^= (1<<3);		//Toggle the LED
 104:	95 b1       	in	r25, 0x05	; 5
 106:	88 e0       	ldi	r24, 0x08	; 8
 108:	89 27       	eor	r24, r25
 10a:	85 b9       	out	0x05, r24	; 5
		overflows = 0;			//Reset counter
 10c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 110:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	TCNT1L = TCNT1L_VALUE;
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCNT1H = TCNT1H_VALUE;	//Load the TCNT1 Register with 0xFF06 
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
		
}
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <main>:

int main(void)
{
	DDRB |= (1<<3);		//Set PB5 as an output
 130:	84 b1       	in	r24, 0x04	; 4
 132:	88 60       	ori	r24, 0x08	; 8
 134:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<3);	//Turn off LED initially
 136:	85 b1       	in	r24, 0x05	; 5
 138:	88 60       	ori	r24, 0x08	; 8
 13a:	85 b9       	out	0x05, r24	; 5
	
	TCCR1B |= (1 << CS11) | (1 << CS10); //Set prescalar to 64. Mode is normal by default
 13c:	e1 e8       	ldi	r30, 0x81	; 129
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	83 60       	ori	r24, 0x03	; 3
 144:	80 83       	st	Z, r24
	TCNT1L = TCNT1L_VALUE;	
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCNT1H = TCNT1H_VALUE;	//Load the TCNT1 Register with 0xFF06
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	
	TIMSK1 |= (1 << TOIE1); //Enable Timer1 overflow interrupt
 152:	ef e6       	ldi	r30, 0x6F	; 111
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	80 83       	st	Z, r24
	
	sei();	//Enable global interrupts
 15c:	78 94       	sei
 15e:	ff cf       	rjmp	.-2      	; 0x15e <main+0x2e>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
