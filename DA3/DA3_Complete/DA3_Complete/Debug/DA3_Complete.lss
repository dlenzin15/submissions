
DA3_Complete.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000272  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009da  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fc  00000000  00000000  00000cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000327  00000000  00000000  000015ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001914  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  00001e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001f02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_7>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_13>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  d4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_13>:
#define OCR2A_VALUE 166
#define OVERFLOW_MAX 2001	// (1.333s / 0.666 ms) = 2001.5


ISR(TIMER1_OVF_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	static int overflows = 0;	//Counter to track to overflows
	overflows++;
  ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <overflows.1733>
  f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <overflows.1733+0x1>
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <overflows.1733+0x1>
  fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <overflows.1733>
	if (overflows >= 1000)		//1000 overflows is approximately 1 second
  fe:	88 3e       	cpi	r24, 0xE8	; 232
 100:	93 40       	sbci	r25, 0x03	; 3
 102:	44 f0       	brlt	.+16     	; 0x114 <__vector_13+0x38>
	{
		PORTB ^= (1<<3);		//Toggle the LED
 104:	95 b1       	in	r25, 0x05	; 5
 106:	88 e0       	ldi	r24, 0x08	; 8
 108:	89 27       	eor	r24, r25
 10a:	85 b9       	out	0x05, r24	; 5
		overflows = 0;			//Reset counter
 10c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <overflows.1733+0x1>
 110:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <overflows.1733>
	}
	
	TCNT1L = TCNT1L_VALUE;
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCNT1H = TCNT1H_VALUE;	//Load the TCNT1 Register with 0xFF06
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	
}
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <__vector_7>:

ISR(TIMER2_COMPA_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
	static int overflows = 0;	//Counter to track overflows
	overflows++;				//Increment the counter everytime the interrupt is triggered
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (overflows == OVERFLOW_MAX) {
 152:	81 3d       	cpi	r24, 0xD1	; 209
 154:	97 40       	sbci	r25, 0x07	; 7
 156:	41 f4       	brne	.+16     	; 0x168 <__vector_7+0x38>
		PORTB ^= (1<<2);	//Toggle the LED
 158:	95 b1       	in	r25, 0x05	; 5
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	89 27       	eor	r24, r25
 15e:	85 b9       	out	0x05, r24	; 5
		overflows = 0;		//Reset the counter
 160:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 164:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <main>:


int main(void)
{
	//Initialize Ports:
	DDRB |= (1<<4) | (1<<3) | (1<<2);	//Set PB4, PB3, and PB2 to output
 178:	84 b1       	in	r24, 0x04	; 4
 17a:	8c 61       	ori	r24, 0x1C	; 28
 17c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<4) | (1<<3) | (1<<2);	// Turn LEDs off initially
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	8c 61       	ori	r24, 0x1C	; 28
 182:	85 b9       	out	0x05, r24	; 5
	
	//Initialize Timers
	//Timer 0
	TCCR0A = 0;				// Set timer to Normal mode
 184:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02);	// set prescalar to 256
 186:	85 b5       	in	r24, 0x25	; 37
 188:	84 60       	ori	r24, 0x04	; 4
 18a:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0x00;			//Initialize the TCNT register to start the timer
 18c:	16 bc       	out	0x26, r1	; 38
	
	//Timer 1
	TCCR1B |= (1 << CS11) | (1 << CS10); //Set prescalar to 64. Mode is normal by default
 18e:	e1 e8       	ldi	r30, 0x81	; 129
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	83 60       	ori	r24, 0x03	; 3
 196:	80 83       	st	Z, r24
	TCNT1L = TCNT1L_VALUE;
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCNT1H = TCNT1H_VALUE;	//Load the TCNT1 Register with 0xFF06
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	
	//Timer 2
	TCCR2A |= (1 << WGM21);	//Set Timer1 to CTC mode
 1a4:	e0 eb       	ldi	r30, 0xB0	; 176
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22);	//Set prescalar to 64
 1ae:	e1 eb       	ldi	r30, 0xB1	; 177
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	84 60       	ori	r24, 0x04	; 4
 1b6:	80 83       	st	Z, r24
	OCR2A = OCR2A_VALUE;	//Load compare register value
 1b8:	86 ea       	ldi	r24, 0xA6	; 166
 1ba:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	//Initialize interrupts
	TIMSK1 |= (1 << TOIE1);		//Enable Timer1 overflow interrupt
 1be:	ef e6       	ldi	r30, 0x6F	; 111
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2A);	//Set interrupt on compare match
 1c8:	e0 e7       	ldi	r30, 0x70	; 112
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	80 83       	st	Z, r24
	sei();						// enable interrupts
 1d2:	78 94       	sei
	
	int overflows = 0;		//Counter to track the how many times the timer overflows
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
	while (1)
	{
		if (TCNT0 == DELAY_TCNT_VALUE) {
 1d8:	86 b5       	in	r24, 0x26	; 38
 1da:	84 31       	cpi	r24, 0x14	; 20
 1dc:	e9 f7       	brne	.-6      	; 0x1d8 <main+0x60>
			overflows++;	//If the TCNT has overflown, increment the counter
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255
			if (overflows >= DELAY_COUNTER) {	//If the timer has overflown enough times, reset the counter and toggle the LED
 1e2:	25 33       	cpi	r18, 0x35	; 53
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
 1e6:	38 07       	cpc	r19, r24
 1e8:	34 f0       	brlt	.+12     	; 0x1f6 <main+0x7e>
				overflows = 0;
				PORTB ^= (1<<4);
 1ea:	95 b1       	in	r25, 0x05	; 5
 1ec:	80 e1       	ldi	r24, 0x10	; 16
 1ee:	89 27       	eor	r24, r25
 1f0:	85 b9       	out	0x05, r24	; 5
	while (1)
	{
		if (TCNT0 == DELAY_TCNT_VALUE) {
			overflows++;	//If the TCNT has overflown, increment the counter
			if (overflows >= DELAY_COUNTER) {	//If the timer has overflown enough times, reset the counter and toggle the LED
				overflows = 0;
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
				PORTB ^= (1<<4);
			}
			TCNT0 = 0;			//Reset the TCNT register
 1f6:	16 bc       	out	0x26, r1	; 38
 1f8:	ef cf       	rjmp	.-34     	; 0x1d8 <main+0x60>

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
