
DA7_Task3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e56  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800100  00800100  00000eca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000efc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001518  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfc  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000987  00000000  00000000  00003120  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00003aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000677  00000000  00000000  00003c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000793  00000000  00000000  000042df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004a72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	08 4a       	sbci	r16, 0xA8	; 168
  b6:	d7 3b       	cpi	r29, 0xB7	; 183
  b8:	3b ce       	rjmp	.-906    	; 0xfffffd30 <__eeprom_end+0xff7efd30>
  ba:	01 6e       	ori	r16, 0xE1	; 225
  bc:	84 bc       	out	0x24, r8	; 36
  be:	bf fd       	.word	0xfdbf	; ????
  c0:	c1 2f       	mov	r28, r17
  c2:	3d 6c       	ori	r19, 0xCD	; 205
  c4:	74 31       	cpi	r23, 0x14	; 20
  c6:	9a bd       	out	0x2a, r25	; 42
  c8:	56 83       	std	Z+6, r21	; 0x06
  ca:	3d da       	rcall	.-2950   	; 0xfffff546 <__eeprom_end+0xff7ef546>
  cc:	3d 00       	.word	0x003d	; ????
  ce:	c7 7f       	andi	r28, 0xF7	; 247
  d0:	11 be       	out	0x31, r1	; 49
  d2:	d9 e4       	ldi	r29, 0x49	; 73
  d4:	bb 4c       	sbci	r27, 0xCB	; 203
  d6:	3e 91       	ld	r19, -X
  d8:	6b aa       	std	Y+51, r6	; 0x33
  da:	aa be       	out	0x3a, r10	; 58
  dc:	00 00       	nop
  de:	00 80       	ld	r0, Z
  e0:	3f 00       	.word	0x003f	; ????

000000e2 <__ctors_end>:
  e2:	11 24       	eor	r1, r1
  e4:	1f be       	out	0x3f, r1	; 63
  e6:	cf ef       	ldi	r28, 0xFF	; 255
  e8:	d8 e0       	ldi	r29, 0x08	; 8
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a0 e0       	ldi	r26, 0x00	; 0
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a8 32       	cpi	r26, 0x28	; 40
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 4e 03 	call	0x69c	; 0x69c <main>
 102:	0c 94 29 07 	jmp	0xe52	; 0xe52 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
 10a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 10e:	88 e4       	ldi	r24, 0x48	; 72
 110:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 114:	08 95       	ret

00000116 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR0 = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
 116:	94 ea       	ldi	r25, 0xA4	; 164
 118:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
 11c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 120:	99 23       	and	r25, r25
 122:	e4 f7       	brge	.-8      	; 0x11c <I2C_Repeated_Start+0x6>
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
 124:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 128:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
 12a:	90 31       	cpi	r25, 0x10	; 16
 12c:	91 f4       	brne	.+36     	; 0x152 <I2C_Repeated_Start+0x3c>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR0 = slave_read_address;								/* If yes then write SLA+R in TWI data register */
 12e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 138:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 13c:	88 23       	and	r24, r24
 13e:	e4 f7       	brge	.-8      	; 0x138 <I2C_Repeated_Start+0x22>
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
 140:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 144:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
 146:	80 34       	cpi	r24, 0x40	; 64
 148:	31 f0       	breq	.+12     	; 0x156 <I2C_Repeated_Start+0x40>
	return 1;												/* If yes then return 1 to indicate ack received */
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
 14a:	80 32       	cpi	r24, 0x20	; 32
 14c:	31 f4       	brne	.+12     	; 0x15a <I2C_Repeated_Start+0x44>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR0 = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
	TWDR0 = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
 15a:	83 e0       	ldi	r24, 0x03	; 3
}
 15c:	08 95       	ret

0000015e <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR0=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
 15e:	84 e9       	ldi	r24, 0x94	; 148
 160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR0 & (1<<TWSTO));								/* Wait until stop condition execution */
 164:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 168:	84 fd       	sbrc	r24, 4
 16a:	fc cf       	rjmp	.-8      	; 0x164 <I2C_Stop+0x6>
}
 16c:	08 95       	ret

0000016e <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
 16e:	cf 93       	push	r28
 170:	c8 2f       	mov	r28, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR0 = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
 172:	84 ea       	ldi	r24, 0xA4	; 164
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while (!(TWCR0 & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
 178:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17c:	88 23       	and	r24, r24
 17e:	e4 f7       	brge	.-8      	; 0x178 <I2C_Start_Wait+0xa>
		status = TWSR0 & 0xF8;								/* Read TWI status register with masking lower three bits */
 180:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 184:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	a1 f7       	brne	.-24     	; 0x172 <I2C_Start_Wait+0x4>
		continue;											/* If no then continue with start loop again */
		TWDR0 = slave_write_address;							/* If yes then write SLA+W in TWI data register */
 18a:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR0 = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
 18e:	84 e8       	ldi	r24, 0x84	; 132
 190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while (!(TWCR0 & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
 194:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 198:	88 23       	and	r24, r24
 19a:	e4 f7       	brge	.-8      	; 0x194 <I2C_Start_Wait+0x26>
		status = TWSR0 & 0xF8;								/* Read TWI status register with masking lower three bits */
 19c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1a0:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
 1a2:	88 31       	cpi	r24, 0x18	; 24
 1a4:	19 f0       	breq	.+6      	; 0x1ac <I2C_Start_Wait+0x3e>
		{
			I2C_Stop();										/* If not then generate stop condition */
 1a6:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Stop>
			continue;										/* continue with start loop again */
 1aa:	e3 cf       	rjmp	.-58     	; 0x172 <I2C_Start_Wait+0x4>
		}
		break;												/* If yes then break loop */
	}
}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR0 = data;											/* Copy data in TWI data register */
 1b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 1b4:	84 e8       	ldi	r24, 0x84	; 132
 1b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 1ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1be:	88 23       	and	r24, r24
 1c0:	e4 f7       	brge	.-8      	; 0x1ba <I2C_Write+0xa>
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
 1c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1c6:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
 1c8:	88 32       	cpi	r24, 0x28	; 40
 1ca:	21 f0       	breq	.+8      	; 0x1d4 <I2C_Write+0x24>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
 1cc:	80 33       	cpi	r24, 0x30	; 48
 1ce:	21 f4       	brne	.+8      	; 0x1d8 <I2C_Write+0x28>
	return 1;												/* If yes then return 1 to indicate nack received */
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	08 95       	ret
	TWDR0 = data;											/* Copy data in TWI data register */
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
 1d8:	82 e0       	ldi	r24, 0x02	; 2
}
 1da:	08 95       	ret

000001dc <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR0=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
 1dc:	84 ec       	ldi	r24, 0xC4	; 196
 1de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 1e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1e6:	88 23       	and	r24, r24
 1e8:	e4 f7       	brge	.-8      	; 0x1e2 <I2C_Read_Ack+0x6>
	return TWDR0;											/* Return received data */
 1ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 1ee:	08 95       	ret

000001f0 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR0=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
 1f0:	84 e8       	ldi	r24, 0x84	; 132
 1f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 1f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fa:	88 23       	and	r24, r24
 1fc:	e4 f7       	brge	.-8      	; 0x1f6 <I2C_Read_Nack+0x6>
	return TWDR0;											/* Return received data */
 1fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 202:	08 95       	ret

00000204 <ComplementaryFilter>:

float Acc_x,Acc_y,Acc_z,Temperature,Gyro_x,Gyro_y,Gyro_z;
float pitch, roll, yaw;

void ComplementaryFilter()
{
 204:	4f 92       	push	r4
 206:	5f 92       	push	r5
 208:	6f 92       	push	r6
 20a:	7f 92       	push	r7
 20c:	8f 92       	push	r8
 20e:	9f 92       	push	r9
 210:	af 92       	push	r10
 212:	bf 92       	push	r11
 214:	cf 92       	push	r12
 216:	df 92       	push	r13
 218:	ef 92       	push	r14
 21a:	ff 92       	push	r15
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	2a 97       	sbiw	r28, 0x0a	; 10
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
	float pitchAcc, rollAcc;
	
	// Integrate the gyroscope data -> int(angularSpeed) = angle
	pitch += (Gyro_x / GYROSCOPE_SENSITIVITY) * dt; // Angle around the X-axis, (float)gyrData[0]
 230:	23 e3       	ldi	r18, 0x33	; 51
 232:	33 e3       	ldi	r19, 0x33	; 51
 234:	43 e8       	ldi	r20, 0x83	; 131
 236:	51 e4       	ldi	r21, 0x41	; 65
 238:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Gyro_x>
 23c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <Gyro_x+0x1>
 240:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Gyro_x+0x2>
 244:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Gyro_x+0x3>
 248:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
 24c:	2a e0       	ldi	r18, 0x0A	; 10
 24e:	37 ed       	ldi	r19, 0xD7	; 215
 250:	43 e2       	ldi	r20, 0x23	; 35
 252:	5c e3       	ldi	r21, 0x3C	; 60
 254:	0e 94 96 06 	call	0xd2c	; 0xd2c <__mulsf3>
 258:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <pitch>
 25c:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <pitch+0x1>
 260:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <pitch+0x2>
 264:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <pitch+0x3>
 268:	0e 94 25 04 	call	0x84a	; 0x84a <__addsf3>
 26c:	4b 01       	movw	r8, r22
 26e:	5c 01       	movw	r10, r24
 270:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <pitch>
 274:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <pitch+0x1>
 278:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <pitch+0x2>
 27c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <pitch+0x3>
	roll -= (Gyro_y / GYROSCOPE_SENSITIVITY) * dt;    // Angle around the Y-axis, (float)gyrData[1]
 280:	23 e3       	ldi	r18, 0x33	; 51
 282:	33 e3       	ldi	r19, 0x33	; 51
 284:	43 e8       	ldi	r20, 0x83	; 131
 286:	51 e4       	ldi	r21, 0x41	; 65
 288:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <Gyro_y>
 28c:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <Gyro_y+0x1>
 290:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Gyro_y+0x2>
 294:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Gyro_y+0x3>
 298:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
 29c:	2a e0       	ldi	r18, 0x0A	; 10
 29e:	37 ed       	ldi	r19, 0xD7	; 215
 2a0:	43 e2       	ldi	r20, 0x23	; 35
 2a2:	5c e3       	ldi	r21, 0x3C	; 60
 2a4:	0e 94 96 06 	call	0xd2c	; 0xd2c <__mulsf3>
 2a8:	2b 01       	movw	r4, r22
 2aa:	3c 01       	movw	r6, r24
 2ac:	9b 01       	movw	r18, r22
 2ae:	ac 01       	movw	r20, r24
 2b0:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <roll>
 2b4:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <roll+0x1>
 2b8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <roll+0x2>
 2bc:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <roll+0x3>
 2c0:	0e 94 24 04 	call	0x848	; 0x848 <__subsf3>
 2c4:	69 83       	std	Y+1, r22	; 0x01
 2c6:	7a 83       	std	Y+2, r23	; 0x02
 2c8:	8b 83       	std	Y+3, r24	; 0x03
 2ca:	9c 83       	std	Y+4, r25	; 0x04
 2cc:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <roll>
 2d0:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <roll+0x1>
 2d4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <roll+0x2>
 2d8:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <roll+0x3>
	yaw += (Gyro_y / GYROSCOPE_SENSITIVITY) * dt;
 2dc:	a3 01       	movw	r20, r6
 2de:	92 01       	movw	r18, r4
 2e0:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <yaw>
 2e4:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <yaw+0x1>
 2e8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <yaw+0x2>
 2ec:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <yaw+0x3>
 2f0:	0e 94 25 04 	call	0x84a	; 0x84a <__addsf3>
 2f4:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <yaw>
 2f8:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <yaw+0x1>
 2fc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <yaw+0x2>
 300:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <yaw+0x3>
	
	// Compensate for drift with accelerometer data if !bullshit
	// Sensitivity = -2 to 2 G at 16Bit -> 2G = 32768 && 0.5G = 8192
	int forceMagnitudeApprox = abs(Acc_x) + abs(Acc_y) + abs(Acc_z);
 304:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Acc_x>
 308:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Acc_x+0x1>
 30c:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <Acc_x+0x2>
 310:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <Acc_x+0x3>
 314:	8d 83       	std	Y+5, r24	; 0x05
 316:	9e 83       	std	Y+6, r25	; 0x06
 318:	af 83       	std	Y+7, r26	; 0x07
 31a:	b8 87       	std	Y+8, r27	; 0x08
 31c:	bc 01       	movw	r22, r24
 31e:	cd 01       	movw	r24, r26
 320:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixsfsi>
 324:	7a 87       	std	Y+10, r23	; 0x0a
 326:	69 87       	std	Y+9, r22	; 0x09
 328:	db 01       	movw	r26, r22
 32a:	bb 23       	and	r27, r27
 32c:	34 f4       	brge	.+12     	; 0x33a <ComplementaryFilter+0x136>
 32e:	22 27       	eor	r18, r18
 330:	33 27       	eor	r19, r19
 332:	26 1b       	sub	r18, r22
 334:	37 0b       	sbc	r19, r23
 336:	3a 87       	std	Y+10, r19	; 0x0a
 338:	29 87       	std	Y+9, r18	; 0x09
 33a:	40 90 0c 01 	lds	r4, 0x010C	; 0x80010c <Acc_y>
 33e:	50 90 0d 01 	lds	r5, 0x010D	; 0x80010d <Acc_y+0x1>
 342:	60 90 0e 01 	lds	r6, 0x010E	; 0x80010e <Acc_y+0x2>
 346:	70 90 0f 01 	lds	r7, 0x010F	; 0x80010f <Acc_y+0x3>
 34a:	c3 01       	movw	r24, r6
 34c:	b2 01       	movw	r22, r4
 34e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixsfsi>
 352:	9b 01       	movw	r18, r22
 354:	77 23       	and	r23, r23
 356:	24 f4       	brge	.+8      	; 0x360 <ComplementaryFilter+0x15c>
 358:	22 27       	eor	r18, r18
 35a:	33 27       	eor	r19, r19
 35c:	26 1b       	sub	r18, r22
 35e:	37 0b       	sbc	r19, r23
 360:	a9 85       	ldd	r26, Y+9	; 0x09
 362:	ba 85       	ldd	r27, Y+10	; 0x0a
 364:	a2 0f       	add	r26, r18
 366:	b3 1f       	adc	r27, r19
 368:	ba 87       	std	Y+10, r27	; 0x0a
 36a:	a9 87       	std	Y+9, r26	; 0x09
 36c:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 370:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 374:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 378:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 37c:	c7 01       	movw	r24, r14
 37e:	b6 01       	movw	r22, r12
 380:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixsfsi>
 384:	9b 01       	movw	r18, r22
 386:	77 23       	and	r23, r23
 388:	24 f4       	brge	.+8      	; 0x392 <ComplementaryFilter+0x18e>
 38a:	22 27       	eor	r18, r18
 38c:	33 27       	eor	r19, r19
 38e:	26 1b       	sub	r18, r22
 390:	37 0b       	sbc	r19, r23
 392:	89 85       	ldd	r24, Y+9	; 0x09
 394:	9a 85       	ldd	r25, Y+10	; 0x0a
 396:	82 0f       	add	r24, r18
 398:	93 1f       	adc	r25, r19
	if (forceMagnitudeApprox > 8192 && forceMagnitudeApprox < 32768)
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	90 42       	sbci	r25, 0x20	; 32
 39e:	0c f4       	brge	.+2      	; 0x3a2 <ComplementaryFilter+0x19e>
 3a0:	6c c0       	rjmp	.+216    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
	{
		// Turning around the X axis results in a vector on the Y-axis
		pitchAcc = atan2f(Acc_y, Acc_z) * 180 / M_PI;
 3a2:	a7 01       	movw	r20, r14
 3a4:	96 01       	movw	r18, r12
 3a6:	c3 01       	movw	r24, r6
 3a8:	b2 01       	movw	r22, r4
 3aa:	0e 94 a4 04 	call	0x948	; 0x948 <atan2>
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	44 e3       	ldi	r20, 0x34	; 52
 3b4:	53 e4       	ldi	r21, 0x43	; 67
 3b6:	0e 94 96 06 	call	0xd2c	; 0xd2c <__mulsf3>
 3ba:	2b ed       	ldi	r18, 0xDB	; 219
 3bc:	3f e0       	ldi	r19, 0x0F	; 15
 3be:	49 e4       	ldi	r20, 0x49	; 73
 3c0:	50 e4       	ldi	r21, 0x40	; 64
 3c2:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
 3c6:	2b 01       	movw	r4, r22
 3c8:	3c 01       	movw	r6, r24
		pitch = pitch * 0.98 + pitchAcc * 0.02;
 3ca:	28 e4       	ldi	r18, 0x48	; 72
 3cc:	31 ee       	ldi	r19, 0xE1	; 225
 3ce:	4a e7       	ldi	r20, 0x7A	; 122
 3d0:	5f e3       	ldi	r21, 0x3F	; 63
 3d2:	c5 01       	movw	r24, r10
 3d4:	b4 01       	movw	r22, r8
 3d6:	0e 94 96 06 	call	0xd2c	; 0xd2c <__mulsf3>
 3da:	4b 01       	movw	r8, r22
 3dc:	5c 01       	movw	r10, r24
 3de:	2a e0       	ldi	r18, 0x0A	; 10
 3e0:	37 ed       	ldi	r19, 0xD7	; 215
 3e2:	43 ea       	ldi	r20, 0xA3	; 163
 3e4:	5c e3       	ldi	r21, 0x3C	; 60
 3e6:	c3 01       	movw	r24, r6
 3e8:	b2 01       	movw	r22, r4
 3ea:	0e 94 96 06 	call	0xd2c	; 0xd2c <__mulsf3>
 3ee:	9b 01       	movw	r18, r22
 3f0:	ac 01       	movw	r20, r24
 3f2:	c5 01       	movw	r24, r10
 3f4:	b4 01       	movw	r22, r8
 3f6:	0e 94 25 04 	call	0x84a	; 0x84a <__addsf3>
 3fa:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <pitch>
 3fe:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <pitch+0x1>
 402:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <pitch+0x2>
 406:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <pitch+0x3>
		
		// Turning around the Y axis results in a vector on the X-axis
		rollAcc = atan2f(Acc_x, Acc_z) * 180 / M_PI;
 40a:	a7 01       	movw	r20, r14
 40c:	96 01       	movw	r18, r12
 40e:	6d 81       	ldd	r22, Y+5	; 0x05
 410:	7e 81       	ldd	r23, Y+6	; 0x06
 412:	8f 81       	ldd	r24, Y+7	; 0x07
 414:	98 85       	ldd	r25, Y+8	; 0x08
 416:	0e 94 a4 04 	call	0x948	; 0x948 <atan2>
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	44 e3       	ldi	r20, 0x34	; 52
 420:	53 e4       	ldi	r21, 0x43	; 67
 422:	0e 94 96 06 	call	0xd2c	; 0xd2c <__mulsf3>
 426:	2b ed       	ldi	r18, 0xDB	; 219
 428:	3f e0       	ldi	r19, 0x0F	; 15
 42a:	49 e4       	ldi	r20, 0x49	; 73
 42c:	50 e4       	ldi	r21, 0x40	; 64
 42e:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
 432:	4b 01       	movw	r8, r22
 434:	5c 01       	movw	r10, r24
		roll = roll * 0.98 + rollAcc * 0.02;
 436:	28 e4       	ldi	r18, 0x48	; 72
 438:	31 ee       	ldi	r19, 0xE1	; 225
 43a:	4a e7       	ldi	r20, 0x7A	; 122
 43c:	5f e3       	ldi	r21, 0x3F	; 63
 43e:	69 81       	ldd	r22, Y+1	; 0x01
 440:	7a 81       	ldd	r23, Y+2	; 0x02
 442:	8b 81       	ldd	r24, Y+3	; 0x03
 444:	9c 81       	ldd	r25, Y+4	; 0x04
 446:	0e 94 96 06 	call	0xd2c	; 0xd2c <__mulsf3>
 44a:	6b 01       	movw	r12, r22
 44c:	7c 01       	movw	r14, r24
 44e:	2a e0       	ldi	r18, 0x0A	; 10
 450:	37 ed       	ldi	r19, 0xD7	; 215
 452:	43 ea       	ldi	r20, 0xA3	; 163
 454:	5c e3       	ldi	r21, 0x3C	; 60
 456:	c5 01       	movw	r24, r10
 458:	b4 01       	movw	r22, r8
 45a:	0e 94 96 06 	call	0xd2c	; 0xd2c <__mulsf3>
 45e:	9b 01       	movw	r18, r22
 460:	ac 01       	movw	r20, r24
 462:	c7 01       	movw	r24, r14
 464:	b6 01       	movw	r22, r12
 466:	0e 94 25 04 	call	0x84a	; 0x84a <__addsf3>
 46a:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <roll>
 46e:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <roll+0x1>
 472:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <roll+0x2>
 476:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <roll+0x3>
	}
}
 47a:	2a 96       	adiw	r28, 0x0a	; 10
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	ff 90       	pop	r15
 48c:	ef 90       	pop	r14
 48e:	df 90       	pop	r13
 490:	cf 90       	pop	r12
 492:	bf 90       	pop	r11
 494:	af 90       	pop	r10
 496:	9f 90       	pop	r9
 498:	8f 90       	pop	r8
 49a:	7f 90       	pop	r7
 49c:	6f 90       	pop	r6
 49e:	5f 90       	pop	r5
 4a0:	4f 90       	pop	r4
 4a2:	08 95       	ret

000004a4 <MPU6050_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a4:	2f ef       	ldi	r18, 0xFF	; 255
 4a6:	82 e5       	ldi	r24, 0x52	; 82
 4a8:	97 e0       	ldi	r25, 0x07	; 7
 4aa:	21 50       	subi	r18, 0x01	; 1
 4ac:	80 40       	sbci	r24, 0x00	; 0
 4ae:	90 40       	sbci	r25, 0x00	; 0
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <MPU6050_Init+0x6>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <MPU6050_Init+0x10>
 4b4:	00 00       	nop

void MPU6050_Init()										/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
 4b6:	80 ed       	ldi	r24, 0xD0	; 208
 4b8:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
 4bc:	89 e1       	ldi	r24, 0x19	; 25
 4be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
 4c2:	87 e0       	ldi	r24, 0x07	; 7
 4c4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <I2C_Write>
	I2C_Stop();
 4c8:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Stop>

	I2C_Start_Wait(0xD0);
 4cc:	80 ed       	ldi	r24, 0xD0	; 208
 4ce:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
 4d2:	8b e6       	ldi	r24, 0x6B	; 107
 4d4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <I2C_Write>
	I2C_Stop();
 4de:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Stop>

	I2C_Start_Wait(0xD0);
 4e2:	80 ed       	ldi	r24, 0xD0	; 208
 4e4:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
 4e8:	8a e1       	ldi	r24, 0x1A	; 26
 4ea:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <I2C_Write>
	I2C_Stop();
 4f4:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Stop>

	I2C_Start_Wait(0xD0);
 4f8:	80 ed       	ldi	r24, 0xD0	; 208
 4fa:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
 4fe:	8b e1       	ldi	r24, 0x1B	; 27
 500:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
 504:	88 e1       	ldi	r24, 0x18	; 24
 506:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <I2C_Write>
	I2C_Stop();
 50a:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Stop>

	I2C_Start_Wait(0xD0);
 50e:	80 ed       	ldi	r24, 0xD0	; 208
 510:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
 514:	88 e3       	ldi	r24, 0x38	; 56
 516:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <I2C_Write>
	I2C_Write(0x01);
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <I2C_Write>
	I2C_Stop();
 520:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Stop>
 524:	08 95       	ret

00000526 <MPU_Start_Loc>:
}

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
 526:	80 ed       	ldi	r24, 0xD0	; 208
 528:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */
 52c:	8b e3       	ldi	r24, 0x3B	; 59
 52e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
 532:	81 ed       	ldi	r24, 0xD1	; 209
 534:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Repeated_Start>
 538:	08 95       	ret

0000053a <Read_RawValue>:
}

void Read_RawValue()
{
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
	MPU_Start_Loc();									/* Read Gyro values */
 53e:	0e 94 93 02 	call	0x526	; 0x526 <MPU_Start_Loc>
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 542:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_Read_Ack>
 546:	c8 2f       	mov	r28, r24
 548:	d0 e0       	ldi	r29, 0x00	; 0
 54a:	dc 2f       	mov	r29, r28
 54c:	cc 27       	eor	r28, r28
 54e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_Read_Ack>
 552:	be 01       	movw	r22, r28
 554:	68 2b       	or	r22, r24
 556:	07 2e       	mov	r0, r23
 558:	00 0c       	add	r0, r0
 55a:	88 0b       	sbc	r24, r24
 55c:	99 0b       	sbc	r25, r25
 55e:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
 562:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <Acc_x>
 566:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <Acc_x+0x1>
 56a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Acc_x+0x2>
 56e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Acc_x+0x3>
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 572:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_Read_Ack>
 576:	c8 2f       	mov	r28, r24
 578:	d0 e0       	ldi	r29, 0x00	; 0
 57a:	dc 2f       	mov	r29, r28
 57c:	cc 27       	eor	r28, r28
 57e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_Read_Ack>
 582:	be 01       	movw	r22, r28
 584:	68 2b       	or	r22, r24
 586:	07 2e       	mov	r0, r23
 588:	00 0c       	add	r0, r0
 58a:	88 0b       	sbc	r24, r24
 58c:	99 0b       	sbc	r25, r25
 58e:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
 592:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <Acc_y>
 596:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <Acc_y+0x1>
 59a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Acc_y+0x2>
 59e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Acc_y+0x3>
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 5a2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_Read_Ack>
 5a6:	c8 2f       	mov	r28, r24
 5a8:	d0 e0       	ldi	r29, 0x00	; 0
 5aa:	dc 2f       	mov	r29, r28
 5ac:	cc 27       	eor	r28, r28
 5ae:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_Read_Ack>
 5b2:	be 01       	movw	r22, r28
 5b4:	68 2b       	or	r22, r24
 5b6:	07 2e       	mov	r0, r23
 5b8:	00 0c       	add	r0, r0
 5ba:	88 0b       	sbc	r24, r24
 5bc:	99 0b       	sbc	r25, r25
 5be:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
 5c2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 5c6:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 5ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 5d2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_Read_Ack>
 5d6:	c8 2f       	mov	r28, r24
 5d8:	d0 e0       	ldi	r29, 0x00	; 0
 5da:	dc 2f       	mov	r29, r28
 5dc:	cc 27       	eor	r28, r28
 5de:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_Read_Ack>
 5e2:	be 01       	movw	r22, r28
 5e4:	68 2b       	or	r22, r24
 5e6:	07 2e       	mov	r0, r23
 5e8:	00 0c       	add	r0, r0
 5ea:	88 0b       	sbc	r24, r24
 5ec:	99 0b       	sbc	r25, r25
 5ee:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
 5f2:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <Temperature>
 5f6:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <Temperature+0x1>
 5fa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Temperature+0x2>
 5fe:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <Temperature+0x3>
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 602:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_Read_Ack>
 606:	c8 2f       	mov	r28, r24
 608:	d0 e0       	ldi	r29, 0x00	; 0
 60a:	dc 2f       	mov	r29, r28
 60c:	cc 27       	eor	r28, r28
 60e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_Read_Ack>
 612:	be 01       	movw	r22, r28
 614:	68 2b       	or	r22, r24
 616:	07 2e       	mov	r0, r23
 618:	00 0c       	add	r0, r0
 61a:	88 0b       	sbc	r24, r24
 61c:	99 0b       	sbc	r25, r25
 61e:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
 622:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <Gyro_x>
 626:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <Gyro_x+0x1>
 62a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Gyro_x+0x2>
 62e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Gyro_x+0x3>
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 632:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_Read_Ack>
 636:	c8 2f       	mov	r28, r24
 638:	d0 e0       	ldi	r29, 0x00	; 0
 63a:	dc 2f       	mov	r29, r28
 63c:	cc 27       	eor	r28, r28
 63e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_Read_Ack>
 642:	be 01       	movw	r22, r28
 644:	68 2b       	or	r22, r24
 646:	07 2e       	mov	r0, r23
 648:	00 0c       	add	r0, r0
 64a:	88 0b       	sbc	r24, r24
 64c:	99 0b       	sbc	r25, r25
 64e:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
 652:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <Gyro_y>
 656:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <Gyro_y+0x1>
 65a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Gyro_y+0x2>
 65e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <Gyro_y+0x3>
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
 662:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_Read_Ack>
 666:	c8 2f       	mov	r28, r24
 668:	d0 e0       	ldi	r29, 0x00	; 0
 66a:	dc 2f       	mov	r29, r28
 66c:	cc 27       	eor	r28, r28
 66e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Read_Nack>
 672:	be 01       	movw	r22, r28
 674:	68 2b       	or	r22, r24
 676:	07 2e       	mov	r0, r23
 678:	00 0c       	add	r0, r0
 67a:	88 0b       	sbc	r24, r24
 67c:	99 0b       	sbc	r25, r25
 67e:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
 682:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <Gyro_z>
 686:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <Gyro_z+0x1>
 68a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Gyro_z+0x2>
 68e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <Gyro_z+0x3>
	I2C_Stop();
 692:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Stop>
}
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	08 95       	ret

0000069c <main>:
int main(void)
{
		char buffer[20], float_[10];
		float Xa,Ya,Za,t;
		float Xg=0,Yg=0,Zg=0;
		I2C_Init();						/* Initialize I2C */
 69c:	0e 94 85 00 	call	0x10a	; 0x10a <I2C_Init>
		MPU6050_Init();					/* Initialize MPU6050 */
 6a0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <MPU6050_Init>
		USART_Init(9600);				/* Initialize USART with 9600 baud rate */
 6a4:	60 e8       	ldi	r22, 0x80	; 128
 6a6:	75 e2       	ldi	r23, 0x25	; 37
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <USART_Init>
		
		int period;
		DDRB = 0x0F;					/* Make PORTD lower pins as output */
 6b0:	8f e0       	ldi	r24, 0x0F	; 15
 6b2:	84 b9       	out	0x04, r24	; 4
		period = 5000;					/* Set period in between two steps of Stepper Motor */

    while (1) 
    {
		Read_RawValue();
 6b4:	0e 94 9d 02 	call	0x53a	; 0x53a <Read_RawValue>
		ComplementaryFilter();
 6b8:	0e 94 02 01 	call	0x204	; 0x204 <ComplementaryFilter>
		
		if (roll > 20.0)
 6bc:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <roll>
 6c0:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <roll+0x1>
 6c4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <roll+0x2>
 6c8:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <roll+0x3>
 6cc:	20 e0       	ldi	r18, 0x00	; 0
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	40 ea       	ldi	r20, 0xA0	; 160
 6d2:	51 e4       	ldi	r21, 0x41	; 65
 6d4:	0e 94 89 06 	call	0xd12	; 0xd12 <__gesf2>
 6d8:	18 16       	cp	r1, r24
 6da:	3c f1       	brlt	.+78     	; 0x72a <main+0x8e>
 6dc:	33 c0       	rjmp	.+102    	; 0x744 <main+0xa8>
		{
			for(int i=0;i<100;i++)	
			{
				PORTB = 0x09;
 6de:	89 e0       	ldi	r24, 0x09	; 9
 6e0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6e2:	8f e1       	ldi	r24, 0x1F	; 31
 6e4:	9e e4       	ldi	r25, 0x4E	; 78
 6e6:	01 97       	sbiw	r24, 0x01	; 1
 6e8:	f1 f7       	brne	.-4      	; 0x6e6 <main+0x4a>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x50>
 6ec:	00 00       	nop
				_delay_us(period);
				PORTB = 0x0C;
 6ee:	8c e0       	ldi	r24, 0x0C	; 12
 6f0:	85 b9       	out	0x05, r24	; 5
 6f2:	8f e1       	ldi	r24, 0x1F	; 31
 6f4:	9e e4       	ldi	r25, 0x4E	; 78
 6f6:	01 97       	sbiw	r24, 0x01	; 1
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <main+0x5a>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <main+0x60>
 6fc:	00 00       	nop
				_delay_us(period);
				PORTB = 0x06;
 6fe:	86 e0       	ldi	r24, 0x06	; 6
 700:	85 b9       	out	0x05, r24	; 5
 702:	8f e1       	ldi	r24, 0x1F	; 31
 704:	9e e4       	ldi	r25, 0x4E	; 78
 706:	01 97       	sbiw	r24, 0x01	; 1
 708:	f1 f7       	brne	.-4      	; 0x706 <main+0x6a>
 70a:	00 c0       	rjmp	.+0      	; 0x70c <main+0x70>
 70c:	00 00       	nop
				_delay_us(period);
				PORTB = 0x03;
 70e:	83 e0       	ldi	r24, 0x03	; 3
 710:	85 b9       	out	0x05, r24	; 5
 712:	8f e1       	ldi	r24, 0x1F	; 31
 714:	9e e4       	ldi	r25, 0x4E	; 78
 716:	01 97       	sbiw	r24, 0x01	; 1
 718:	f1 f7       	brne	.-4      	; 0x716 <main+0x7a>
 71a:	00 c0       	rjmp	.+0      	; 0x71c <main+0x80>
 71c:	00 00       	nop
				_delay_us(period);
				Read_RawValue();
 71e:	0e 94 9d 02 	call	0x53a	; 0x53a <Read_RawValue>
				ComplementaryFilter();
 722:	0e 94 02 01 	call	0x204	; 0x204 <ComplementaryFilter>
		Read_RawValue();
		ComplementaryFilter();
		
		if (roll > 20.0)
		{
			for(int i=0;i<100;i++)	
 726:	21 96       	adiw	r28, 0x01	; 1
 728:	02 c0       	rjmp	.+4      	; 0x72e <main+0x92>
 72a:	c0 e0       	ldi	r28, 0x00	; 0
 72c:	d0 e0       	ldi	r29, 0x00	; 0
 72e:	c4 36       	cpi	r28, 0x64	; 100
 730:	d1 05       	cpc	r29, r1
 732:	ac f2       	brlt	.-86     	; 0x6de <main+0x42>
				PORTB = 0x03;
				_delay_us(period);
				Read_RawValue();
				ComplementaryFilter();
			}
			PORTB = 0x09;			/* last one step to acquire initial position */
 734:	89 e0       	ldi	r24, 0x09	; 9
 736:	85 b9       	out	0x05, r24	; 5
 738:	8f e1       	ldi	r24, 0x1F	; 31
 73a:	9e e4       	ldi	r25, 0x4E	; 78
 73c:	01 97       	sbiw	r24, 0x01	; 1
 73e:	f1 f7       	brne	.-4      	; 0x73c <main+0xa0>
 740:	00 c0       	rjmp	.+0      	; 0x742 <main+0xa6>
 742:	00 00       	nop
			_delay_us(period);
		}
		
		if (roll < -20.0)
 744:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <roll>
 748:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <roll+0x1>
 74c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <roll+0x2>
 750:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <roll+0x3>
 754:	20 e0       	ldi	r18, 0x00	; 0
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	40 ea       	ldi	r20, 0xA0	; 160
 75a:	51 ec       	ldi	r21, 0xC1	; 193
 75c:	0e 94 03 05 	call	0xa06	; 0xa06 <__cmpsf2>
 760:	88 23       	and	r24, r24
 762:	3c f1       	brlt	.+78     	; 0x7b2 <main+0x116>
 764:	33 c0       	rjmp	.+102    	; 0x7cc <main+0x130>
		{
			for(int i=0;i<100;i++)		/* Rotate Stepper Motor clockwise with Full step sequence; Full step angle 7.5 */
			{
				PORTB = 0x09;
 766:	89 e0       	ldi	r24, 0x09	; 9
 768:	85 b9       	out	0x05, r24	; 5
 76a:	8f e1       	ldi	r24, 0x1F	; 31
 76c:	9e e4       	ldi	r25, 0x4E	; 78
 76e:	01 97       	sbiw	r24, 0x01	; 1
 770:	f1 f7       	brne	.-4      	; 0x76e <main+0xd2>
 772:	00 c0       	rjmp	.+0      	; 0x774 <main+0xd8>
 774:	00 00       	nop
				_delay_us(period);
				PORTB = 0x03;
 776:	83 e0       	ldi	r24, 0x03	; 3
 778:	85 b9       	out	0x05, r24	; 5
 77a:	8f e1       	ldi	r24, 0x1F	; 31
 77c:	9e e4       	ldi	r25, 0x4E	; 78
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	f1 f7       	brne	.-4      	; 0x77e <main+0xe2>
 782:	00 c0       	rjmp	.+0      	; 0x784 <main+0xe8>
 784:	00 00       	nop
				_delay_us(period);
				PORTB = 0x06;
 786:	86 e0       	ldi	r24, 0x06	; 6
 788:	85 b9       	out	0x05, r24	; 5
 78a:	8f e1       	ldi	r24, 0x1F	; 31
 78c:	9e e4       	ldi	r25, 0x4E	; 78
 78e:	01 97       	sbiw	r24, 0x01	; 1
 790:	f1 f7       	brne	.-4      	; 0x78e <main+0xf2>
 792:	00 c0       	rjmp	.+0      	; 0x794 <main+0xf8>
 794:	00 00       	nop
				_delay_us(period);
				PORTB = 0x0C;
 796:	8c e0       	ldi	r24, 0x0C	; 12
 798:	85 b9       	out	0x05, r24	; 5
 79a:	8f e1       	ldi	r24, 0x1F	; 31
 79c:	9e e4       	ldi	r25, 0x4E	; 78
 79e:	01 97       	sbiw	r24, 0x01	; 1
 7a0:	f1 f7       	brne	.-4      	; 0x79e <main+0x102>
 7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <main+0x108>
 7a4:	00 00       	nop
				_delay_us(period);
				Read_RawValue();
 7a6:	0e 94 9d 02 	call	0x53a	; 0x53a <Read_RawValue>
				ComplementaryFilter();
 7aa:	0e 94 02 01 	call	0x204	; 0x204 <ComplementaryFilter>
			_delay_us(period);
		}
		
		if (roll < -20.0)
		{
			for(int i=0;i<100;i++)		/* Rotate Stepper Motor clockwise with Full step sequence; Full step angle 7.5 */
 7ae:	21 96       	adiw	r28, 0x01	; 1
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <main+0x11a>
 7b2:	c0 e0       	ldi	r28, 0x00	; 0
 7b4:	d0 e0       	ldi	r29, 0x00	; 0
 7b6:	c4 36       	cpi	r28, 0x64	; 100
 7b8:	d1 05       	cpc	r29, r1
 7ba:	ac f2       	brlt	.-86     	; 0x766 <main+0xca>
				PORTB = 0x0C;
				_delay_us(period);
				Read_RawValue();
				ComplementaryFilter();
			}
			PORTB = 0x09;			/* last one step to acquire initial position */
 7bc:	89 e0       	ldi	r24, 0x09	; 9
 7be:	85 b9       	out	0x05, r24	; 5
 7c0:	8f e1       	ldi	r24, 0x1F	; 31
 7c2:	9e e4       	ldi	r25, 0x4E	; 78
 7c4:	01 97       	sbiw	r24, 0x01	; 1
 7c6:	f1 f7       	brne	.-4      	; 0x7c4 <main+0x128>
 7c8:	00 c0       	rjmp	.+0      	; 0x7ca <main+0x12e>
 7ca:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7cc:	9f ef       	ldi	r25, 0xFF	; 255
 7ce:	21 ee       	ldi	r18, 0xE1	; 225
 7d0:	84 e0       	ldi	r24, 0x04	; 4
 7d2:	91 50       	subi	r25, 0x01	; 1
 7d4:	20 40       	sbci	r18, 0x00	; 0
 7d6:	80 40       	sbci	r24, 0x00	; 0
 7d8:	e1 f7       	brne	.-8      	; 0x7d2 <main+0x136>
 7da:	00 c0       	rjmp	.+0      	; 0x7dc <main+0x140>
 7dc:	00 00       	nop
 7de:	6a cf       	rjmp	.-300    	; 0x6b4 <main+0x18>

000007e0 <USART_Init>:

#include "uart.h"								/* Include USART header file */

void USART_Init(unsigned long BAUDRATE)			/* USART initialize function */
{ 
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);		/* Enable USART transmitter and receiver */
 7e0:	e1 ec       	ldi	r30, 0xC1	; 193
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	20 81       	ld	r18, Z
 7e6:	28 61       	ori	r18, 0x18	; 24
 7e8:	20 83       	st	Z, r18
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);	/* Write USCRC for 8 bit data and 1 stop bit */ 
 7ea:	e2 ec       	ldi	r30, 0xC2	; 194
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	20 81       	ld	r18, Z
 7f0:	26 60       	ori	r18, 0x06	; 6
 7f2:	20 83       	st	Z, r18
	UBRR0L = BAUD_PRESCALE;						/* Load UBRRL with lower 8 bit of prescale value */
 7f4:	dc 01       	movw	r26, r24
 7f6:	cb 01       	movw	r24, r22
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	aa 1f       	adc	r26, r26
 7fe:	bb 1f       	adc	r27, r27
 800:	88 0f       	add	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	aa 1f       	adc	r26, r26
 806:	bb 1f       	adc	r27, r27
 808:	9c 01       	movw	r18, r24
 80a:	ad 01       	movw	r20, r26
 80c:	22 0f       	add	r18, r18
 80e:	33 1f       	adc	r19, r19
 810:	44 1f       	adc	r20, r20
 812:	55 1f       	adc	r21, r21
 814:	22 0f       	add	r18, r18
 816:	33 1f       	adc	r19, r19
 818:	44 1f       	adc	r20, r20
 81a:	55 1f       	adc	r21, r21
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	74 e2       	ldi	r23, 0x24	; 36
 820:	84 ef       	ldi	r24, 0xF4	; 244
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 07 07 	call	0xe0e	; 0xe0e <__udivmodsi4>
 828:	8f ef       	ldi	r24, 0xFF	; 255
 82a:	82 0f       	add	r24, r18
 82c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = (BAUD_PRESCALE >> 8);				/* Load UBRRH with upper 8 bit of prescale value */
 830:	da 01       	movw	r26, r20
 832:	c9 01       	movw	r24, r18
 834:	01 97       	sbiw	r24, 0x01	; 1
 836:	a1 09       	sbc	r26, r1
 838:	b1 09       	sbc	r27, r1
 83a:	89 2f       	mov	r24, r25
 83c:	9a 2f       	mov	r25, r26
 83e:	ab 2f       	mov	r26, r27
 840:	bb 27       	eor	r27, r27
 842:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 846:	08 95       	ret

00000848 <__subsf3>:
 848:	50 58       	subi	r21, 0x80	; 128

0000084a <__addsf3>:
 84a:	bb 27       	eor	r27, r27
 84c:	aa 27       	eor	r26, r26
 84e:	0e 94 3c 04 	call	0x878	; 0x878 <__addsf3x>
 852:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_round>
 856:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_pscA>
 85a:	38 f0       	brcs	.+14     	; 0x86a <__addsf3+0x20>
 85c:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_pscB>
 860:	20 f0       	brcs	.+8      	; 0x86a <__addsf3+0x20>
 862:	39 f4       	brne	.+14     	; 0x872 <__addsf3+0x28>
 864:	9f 3f       	cpi	r25, 0xFF	; 255
 866:	19 f4       	brne	.+6      	; 0x86e <__addsf3+0x24>
 868:	26 f4       	brtc	.+8      	; 0x872 <__addsf3+0x28>
 86a:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_nan>
 86e:	0e f4       	brtc	.+2      	; 0x872 <__addsf3+0x28>
 870:	e0 95       	com	r30
 872:	e7 fb       	bst	r30, 7
 874:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>

00000878 <__addsf3x>:
 878:	e9 2f       	mov	r30, r25
 87a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_split3>
 87e:	58 f3       	brcs	.-42     	; 0x856 <__addsf3+0xc>
 880:	ba 17       	cp	r27, r26
 882:	62 07       	cpc	r22, r18
 884:	73 07       	cpc	r23, r19
 886:	84 07       	cpc	r24, r20
 888:	95 07       	cpc	r25, r21
 88a:	20 f0       	brcs	.+8      	; 0x894 <__addsf3x+0x1c>
 88c:	79 f4       	brne	.+30     	; 0x8ac <__addsf3x+0x34>
 88e:	a6 f5       	brtc	.+104    	; 0x8f8 <__addsf3x+0x80>
 890:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_zero>
 894:	0e f4       	brtc	.+2      	; 0x898 <__addsf3x+0x20>
 896:	e0 95       	com	r30
 898:	0b 2e       	mov	r0, r27
 89a:	ba 2f       	mov	r27, r26
 89c:	a0 2d       	mov	r26, r0
 89e:	0b 01       	movw	r0, r22
 8a0:	b9 01       	movw	r22, r18
 8a2:	90 01       	movw	r18, r0
 8a4:	0c 01       	movw	r0, r24
 8a6:	ca 01       	movw	r24, r20
 8a8:	a0 01       	movw	r20, r0
 8aa:	11 24       	eor	r1, r1
 8ac:	ff 27       	eor	r31, r31
 8ae:	59 1b       	sub	r21, r25
 8b0:	99 f0       	breq	.+38     	; 0x8d8 <__addsf3x+0x60>
 8b2:	59 3f       	cpi	r21, 0xF9	; 249
 8b4:	50 f4       	brcc	.+20     	; 0x8ca <__addsf3x+0x52>
 8b6:	50 3e       	cpi	r21, 0xE0	; 224
 8b8:	68 f1       	brcs	.+90     	; 0x914 <__stack+0x15>
 8ba:	1a 16       	cp	r1, r26
 8bc:	f0 40       	sbci	r31, 0x00	; 0
 8be:	a2 2f       	mov	r26, r18
 8c0:	23 2f       	mov	r18, r19
 8c2:	34 2f       	mov	r19, r20
 8c4:	44 27       	eor	r20, r20
 8c6:	58 5f       	subi	r21, 0xF8	; 248
 8c8:	f3 cf       	rjmp	.-26     	; 0x8b0 <__addsf3x+0x38>
 8ca:	46 95       	lsr	r20
 8cc:	37 95       	ror	r19
 8ce:	27 95       	ror	r18
 8d0:	a7 95       	ror	r26
 8d2:	f0 40       	sbci	r31, 0x00	; 0
 8d4:	53 95       	inc	r21
 8d6:	c9 f7       	brne	.-14     	; 0x8ca <__addsf3x+0x52>
 8d8:	7e f4       	brtc	.+30     	; 0x8f8 <__addsf3x+0x80>
 8da:	1f 16       	cp	r1, r31
 8dc:	ba 0b       	sbc	r27, r26
 8de:	62 0b       	sbc	r22, r18
 8e0:	73 0b       	sbc	r23, r19
 8e2:	84 0b       	sbc	r24, r20
 8e4:	ba f0       	brmi	.+46     	; 0x914 <__stack+0x15>
 8e6:	91 50       	subi	r25, 0x01	; 1
 8e8:	a1 f0       	breq	.+40     	; 0x912 <__stack+0x13>
 8ea:	ff 0f       	add	r31, r31
 8ec:	bb 1f       	adc	r27, r27
 8ee:	66 1f       	adc	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	88 1f       	adc	r24, r24
 8f4:	c2 f7       	brpl	.-16     	; 0x8e6 <__addsf3x+0x6e>
 8f6:	0e c0       	rjmp	.+28     	; 0x914 <__stack+0x15>
 8f8:	ba 0f       	add	r27, r26
 8fa:	62 1f       	adc	r22, r18
 8fc:	73 1f       	adc	r23, r19
 8fe:	84 1f       	adc	r24, r20
 900:	48 f4       	brcc	.+18     	; 0x914 <__stack+0x15>
 902:	87 95       	ror	r24
 904:	77 95       	ror	r23
 906:	67 95       	ror	r22
 908:	b7 95       	ror	r27
 90a:	f7 95       	ror	r31
 90c:	9e 3f       	cpi	r25, 0xFE	; 254
 90e:	08 f0       	brcs	.+2      	; 0x912 <__stack+0x13>
 910:	b0 cf       	rjmp	.-160    	; 0x872 <__addsf3+0x28>
 912:	93 95       	inc	r25
 914:	88 0f       	add	r24, r24
 916:	08 f0       	brcs	.+2      	; 0x91a <__stack+0x1b>
 918:	99 27       	eor	r25, r25
 91a:	ee 0f       	add	r30, r30
 91c:	97 95       	ror	r25
 91e:	87 95       	ror	r24
 920:	08 95       	ret
 922:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_pscA>
 926:	60 f0       	brcs	.+24     	; 0x940 <__stack+0x41>
 928:	80 e8       	ldi	r24, 0x80	; 128
 92a:	91 e0       	ldi	r25, 0x01	; 1
 92c:	09 f4       	brne	.+2      	; 0x930 <__stack+0x31>
 92e:	9e ef       	ldi	r25, 0xFE	; 254
 930:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_pscB>
 934:	28 f0       	brcs	.+10     	; 0x940 <__stack+0x41>
 936:	40 e8       	ldi	r20, 0x80	; 128
 938:	51 e0       	ldi	r21, 0x01	; 1
 93a:	71 f4       	brne	.+28     	; 0x958 <atan2+0x10>
 93c:	5e ef       	ldi	r21, 0xFE	; 254
 93e:	0c c0       	rjmp	.+24     	; 0x958 <atan2+0x10>
 940:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_nan>
 944:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_zero>

00000948 <atan2>:
 948:	e9 2f       	mov	r30, r25
 94a:	e0 78       	andi	r30, 0x80	; 128
 94c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_split3>
 950:	40 f3       	brcs	.-48     	; 0x922 <__stack+0x23>
 952:	09 2e       	mov	r0, r25
 954:	05 2a       	or	r0, r21
 956:	b1 f3       	breq	.-20     	; 0x944 <__stack+0x45>
 958:	26 17       	cp	r18, r22
 95a:	37 07       	cpc	r19, r23
 95c:	48 07       	cpc	r20, r24
 95e:	59 07       	cpc	r21, r25
 960:	38 f0       	brcs	.+14     	; 0x970 <atan2+0x28>
 962:	0e 2e       	mov	r0, r30
 964:	07 f8       	bld	r0, 7
 966:	e0 25       	eor	r30, r0
 968:	69 f0       	breq	.+26     	; 0x984 <atan2+0x3c>
 96a:	e0 25       	eor	r30, r0
 96c:	e0 64       	ori	r30, 0x40	; 64
 96e:	0a c0       	rjmp	.+20     	; 0x984 <atan2+0x3c>
 970:	ef 63       	ori	r30, 0x3F	; 63
 972:	07 f8       	bld	r0, 7
 974:	00 94       	com	r0
 976:	07 fa       	bst	r0, 7
 978:	db 01       	movw	r26, r22
 97a:	b9 01       	movw	r22, r18
 97c:	9d 01       	movw	r18, r26
 97e:	dc 01       	movw	r26, r24
 980:	ca 01       	movw	r24, r20
 982:	ad 01       	movw	r20, r26
 984:	ef 93       	push	r30
 986:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divsf3_pse>
 98a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fp_round>
 98e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <atan>
 992:	5f 91       	pop	r21
 994:	55 23       	and	r21, r21
 996:	39 f0       	breq	.+14     	; 0x9a6 <atan2+0x5e>
 998:	2b ed       	ldi	r18, 0xDB	; 219
 99a:	3f e0       	ldi	r19, 0x0F	; 15
 99c:	49 e4       	ldi	r20, 0x49	; 73
 99e:	50 fd       	sbrc	r21, 0
 9a0:	49 ec       	ldi	r20, 0xC9	; 201
 9a2:	0c 94 25 04 	jmp	0x84a	; 0x84a <__addsf3>
 9a6:	08 95       	ret

000009a8 <atan>:
 9a8:	df 93       	push	r29
 9aa:	dd 27       	eor	r29, r29
 9ac:	b9 2f       	mov	r27, r25
 9ae:	bf 77       	andi	r27, 0x7F	; 127
 9b0:	40 e8       	ldi	r20, 0x80	; 128
 9b2:	5f e3       	ldi	r21, 0x3F	; 63
 9b4:	16 16       	cp	r1, r22
 9b6:	17 06       	cpc	r1, r23
 9b8:	48 07       	cpc	r20, r24
 9ba:	5b 07       	cpc	r21, r27
 9bc:	18 f4       	brcc	.+6      	; 0x9c4 <atan+0x1c>
 9be:	d9 2f       	mov	r29, r25
 9c0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <inverse>
 9c4:	9f 93       	push	r25
 9c6:	8f 93       	push	r24
 9c8:	7f 93       	push	r23
 9ca:	6f 93       	push	r22
 9cc:	0e 94 03 07 	call	0xe06	; 0xe06 <square>
 9d0:	e4 eb       	ldi	r30, 0xB4	; 180
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_powser>
 9d8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fp_round>
 9dc:	2f 91       	pop	r18
 9de:	3f 91       	pop	r19
 9e0:	4f 91       	pop	r20
 9e2:	5f 91       	pop	r21
 9e4:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3x>
 9e8:	dd 23       	and	r29, r29
 9ea:	51 f0       	breq	.+20     	; 0xa00 <atan+0x58>
 9ec:	90 58       	subi	r25, 0x80	; 128
 9ee:	a2 ea       	ldi	r26, 0xA2	; 162
 9f0:	2a ed       	ldi	r18, 0xDA	; 218
 9f2:	3f e0       	ldi	r19, 0x0F	; 15
 9f4:	49 ec       	ldi	r20, 0xC9	; 201
 9f6:	5f e3       	ldi	r21, 0x3F	; 63
 9f8:	d0 78       	andi	r29, 0x80	; 128
 9fa:	5d 27       	eor	r21, r29
 9fc:	0e 94 3c 04 	call	0x878	; 0x878 <__addsf3x>
 a00:	df 91       	pop	r29
 a02:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_round>

00000a06 <__cmpsf2>:
 a06:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_cmp>
 a0a:	08 f4       	brcc	.+2      	; 0xa0e <__cmpsf2+0x8>
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	08 95       	ret

00000a10 <__divsf3>:
 a10:	0e 94 1c 05 	call	0xa38	; 0xa38 <__divsf3x>
 a14:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_round>
 a18:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_pscB>
 a1c:	58 f0       	brcs	.+22     	; 0xa34 <__divsf3+0x24>
 a1e:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_pscA>
 a22:	40 f0       	brcs	.+16     	; 0xa34 <__divsf3+0x24>
 a24:	29 f4       	brne	.+10     	; 0xa30 <__divsf3+0x20>
 a26:	5f 3f       	cpi	r21, 0xFF	; 255
 a28:	29 f0       	breq	.+10     	; 0xa34 <__divsf3+0x24>
 a2a:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
 a2e:	51 11       	cpse	r21, r1
 a30:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__fp_szero>
 a34:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_nan>

00000a38 <__divsf3x>:
 a38:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_split3>
 a3c:	68 f3       	brcs	.-38     	; 0xa18 <__divsf3+0x8>

00000a3e <__divsf3_pse>:
 a3e:	99 23       	and	r25, r25
 a40:	b1 f3       	breq	.-20     	; 0xa2e <__divsf3+0x1e>
 a42:	55 23       	and	r21, r21
 a44:	91 f3       	breq	.-28     	; 0xa2a <__divsf3+0x1a>
 a46:	95 1b       	sub	r25, r21
 a48:	55 0b       	sbc	r21, r21
 a4a:	bb 27       	eor	r27, r27
 a4c:	aa 27       	eor	r26, r26
 a4e:	62 17       	cp	r22, r18
 a50:	73 07       	cpc	r23, r19
 a52:	84 07       	cpc	r24, r20
 a54:	38 f0       	brcs	.+14     	; 0xa64 <__divsf3_pse+0x26>
 a56:	9f 5f       	subi	r25, 0xFF	; 255
 a58:	5f 4f       	sbci	r21, 0xFF	; 255
 a5a:	22 0f       	add	r18, r18
 a5c:	33 1f       	adc	r19, r19
 a5e:	44 1f       	adc	r20, r20
 a60:	aa 1f       	adc	r26, r26
 a62:	a9 f3       	breq	.-22     	; 0xa4e <__divsf3_pse+0x10>
 a64:	35 d0       	rcall	.+106    	; 0xad0 <__divsf3_pse+0x92>
 a66:	0e 2e       	mov	r0, r30
 a68:	3a f0       	brmi	.+14     	; 0xa78 <__divsf3_pse+0x3a>
 a6a:	e0 e8       	ldi	r30, 0x80	; 128
 a6c:	32 d0       	rcall	.+100    	; 0xad2 <__divsf3_pse+0x94>
 a6e:	91 50       	subi	r25, 0x01	; 1
 a70:	50 40       	sbci	r21, 0x00	; 0
 a72:	e6 95       	lsr	r30
 a74:	00 1c       	adc	r0, r0
 a76:	ca f7       	brpl	.-14     	; 0xa6a <__divsf3_pse+0x2c>
 a78:	2b d0       	rcall	.+86     	; 0xad0 <__divsf3_pse+0x92>
 a7a:	fe 2f       	mov	r31, r30
 a7c:	29 d0       	rcall	.+82     	; 0xad0 <__divsf3_pse+0x92>
 a7e:	66 0f       	add	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	bb 1f       	adc	r27, r27
 a86:	26 17       	cp	r18, r22
 a88:	37 07       	cpc	r19, r23
 a8a:	48 07       	cpc	r20, r24
 a8c:	ab 07       	cpc	r26, r27
 a8e:	b0 e8       	ldi	r27, 0x80	; 128
 a90:	09 f0       	breq	.+2      	; 0xa94 <__divsf3_pse+0x56>
 a92:	bb 0b       	sbc	r27, r27
 a94:	80 2d       	mov	r24, r0
 a96:	bf 01       	movw	r22, r30
 a98:	ff 27       	eor	r31, r31
 a9a:	93 58       	subi	r25, 0x83	; 131
 a9c:	5f 4f       	sbci	r21, 0xFF	; 255
 a9e:	3a f0       	brmi	.+14     	; 0xaae <__divsf3_pse+0x70>
 aa0:	9e 3f       	cpi	r25, 0xFE	; 254
 aa2:	51 05       	cpc	r21, r1
 aa4:	78 f0       	brcs	.+30     	; 0xac4 <__divsf3_pse+0x86>
 aa6:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
 aaa:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__fp_szero>
 aae:	5f 3f       	cpi	r21, 0xFF	; 255
 ab0:	e4 f3       	brlt	.-8      	; 0xaaa <__divsf3_pse+0x6c>
 ab2:	98 3e       	cpi	r25, 0xE8	; 232
 ab4:	d4 f3       	brlt	.-12     	; 0xaaa <__divsf3_pse+0x6c>
 ab6:	86 95       	lsr	r24
 ab8:	77 95       	ror	r23
 aba:	67 95       	ror	r22
 abc:	b7 95       	ror	r27
 abe:	f7 95       	ror	r31
 ac0:	9f 5f       	subi	r25, 0xFF	; 255
 ac2:	c9 f7       	brne	.-14     	; 0xab6 <__divsf3_pse+0x78>
 ac4:	88 0f       	add	r24, r24
 ac6:	91 1d       	adc	r25, r1
 ac8:	96 95       	lsr	r25
 aca:	87 95       	ror	r24
 acc:	97 f9       	bld	r25, 7
 ace:	08 95       	ret
 ad0:	e1 e0       	ldi	r30, 0x01	; 1
 ad2:	66 0f       	add	r22, r22
 ad4:	77 1f       	adc	r23, r23
 ad6:	88 1f       	adc	r24, r24
 ad8:	bb 1f       	adc	r27, r27
 ada:	62 17       	cp	r22, r18
 adc:	73 07       	cpc	r23, r19
 ade:	84 07       	cpc	r24, r20
 ae0:	ba 07       	cpc	r27, r26
 ae2:	20 f0       	brcs	.+8      	; 0xaec <__divsf3_pse+0xae>
 ae4:	62 1b       	sub	r22, r18
 ae6:	73 0b       	sbc	r23, r19
 ae8:	84 0b       	sbc	r24, r20
 aea:	ba 0b       	sbc	r27, r26
 aec:	ee 1f       	adc	r30, r30
 aee:	88 f7       	brcc	.-30     	; 0xad2 <__divsf3_pse+0x94>
 af0:	e0 95       	com	r30
 af2:	08 95       	ret

00000af4 <__fixsfsi>:
 af4:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixunssfsi>
 af8:	68 94       	set
 afa:	b1 11       	cpse	r27, r1
 afc:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__fp_szero>
 b00:	08 95       	ret

00000b02 <__fixunssfsi>:
 b02:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fp_splitA>
 b06:	88 f0       	brcs	.+34     	; 0xb2a <__fixunssfsi+0x28>
 b08:	9f 57       	subi	r25, 0x7F	; 127
 b0a:	98 f0       	brcs	.+38     	; 0xb32 <__fixunssfsi+0x30>
 b0c:	b9 2f       	mov	r27, r25
 b0e:	99 27       	eor	r25, r25
 b10:	b7 51       	subi	r27, 0x17	; 23
 b12:	b0 f0       	brcs	.+44     	; 0xb40 <__fixunssfsi+0x3e>
 b14:	e1 f0       	breq	.+56     	; 0xb4e <__fixunssfsi+0x4c>
 b16:	66 0f       	add	r22, r22
 b18:	77 1f       	adc	r23, r23
 b1a:	88 1f       	adc	r24, r24
 b1c:	99 1f       	adc	r25, r25
 b1e:	1a f0       	brmi	.+6      	; 0xb26 <__fixunssfsi+0x24>
 b20:	ba 95       	dec	r27
 b22:	c9 f7       	brne	.-14     	; 0xb16 <__fixunssfsi+0x14>
 b24:	14 c0       	rjmp	.+40     	; 0xb4e <__fixunssfsi+0x4c>
 b26:	b1 30       	cpi	r27, 0x01	; 1
 b28:	91 f0       	breq	.+36     	; 0xb4e <__fixunssfsi+0x4c>
 b2a:	0e 94 82 06 	call	0xd04	; 0xd04 <__fp_zero>
 b2e:	b1 e0       	ldi	r27, 0x01	; 1
 b30:	08 95       	ret
 b32:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_zero>
 b36:	67 2f       	mov	r22, r23
 b38:	78 2f       	mov	r23, r24
 b3a:	88 27       	eor	r24, r24
 b3c:	b8 5f       	subi	r27, 0xF8	; 248
 b3e:	39 f0       	breq	.+14     	; 0xb4e <__fixunssfsi+0x4c>
 b40:	b9 3f       	cpi	r27, 0xF9	; 249
 b42:	cc f3       	brlt	.-14     	; 0xb36 <__fixunssfsi+0x34>
 b44:	86 95       	lsr	r24
 b46:	77 95       	ror	r23
 b48:	67 95       	ror	r22
 b4a:	b3 95       	inc	r27
 b4c:	d9 f7       	brne	.-10     	; 0xb44 <__fixunssfsi+0x42>
 b4e:	3e f4       	brtc	.+14     	; 0xb5e <__fixunssfsi+0x5c>
 b50:	90 95       	com	r25
 b52:	80 95       	com	r24
 b54:	70 95       	com	r23
 b56:	61 95       	neg	r22
 b58:	7f 4f       	sbci	r23, 0xFF	; 255
 b5a:	8f 4f       	sbci	r24, 0xFF	; 255
 b5c:	9f 4f       	sbci	r25, 0xFF	; 255
 b5e:	08 95       	ret

00000b60 <__floatunsisf>:
 b60:	e8 94       	clt
 b62:	09 c0       	rjmp	.+18     	; 0xb76 <__floatsisf+0x12>

00000b64 <__floatsisf>:
 b64:	97 fb       	bst	r25, 7
 b66:	3e f4       	brtc	.+14     	; 0xb76 <__floatsisf+0x12>
 b68:	90 95       	com	r25
 b6a:	80 95       	com	r24
 b6c:	70 95       	com	r23
 b6e:	61 95       	neg	r22
 b70:	7f 4f       	sbci	r23, 0xFF	; 255
 b72:	8f 4f       	sbci	r24, 0xFF	; 255
 b74:	9f 4f       	sbci	r25, 0xFF	; 255
 b76:	99 23       	and	r25, r25
 b78:	a9 f0       	breq	.+42     	; 0xba4 <__floatsisf+0x40>
 b7a:	f9 2f       	mov	r31, r25
 b7c:	96 e9       	ldi	r25, 0x96	; 150
 b7e:	bb 27       	eor	r27, r27
 b80:	93 95       	inc	r25
 b82:	f6 95       	lsr	r31
 b84:	87 95       	ror	r24
 b86:	77 95       	ror	r23
 b88:	67 95       	ror	r22
 b8a:	b7 95       	ror	r27
 b8c:	f1 11       	cpse	r31, r1
 b8e:	f8 cf       	rjmp	.-16     	; 0xb80 <__floatsisf+0x1c>
 b90:	fa f4       	brpl	.+62     	; 0xbd0 <__floatsisf+0x6c>
 b92:	bb 0f       	add	r27, r27
 b94:	11 f4       	brne	.+4      	; 0xb9a <__floatsisf+0x36>
 b96:	60 ff       	sbrs	r22, 0
 b98:	1b c0       	rjmp	.+54     	; 0xbd0 <__floatsisf+0x6c>
 b9a:	6f 5f       	subi	r22, 0xFF	; 255
 b9c:	7f 4f       	sbci	r23, 0xFF	; 255
 b9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ba0:	9f 4f       	sbci	r25, 0xFF	; 255
 ba2:	16 c0       	rjmp	.+44     	; 0xbd0 <__floatsisf+0x6c>
 ba4:	88 23       	and	r24, r24
 ba6:	11 f0       	breq	.+4      	; 0xbac <__floatsisf+0x48>
 ba8:	96 e9       	ldi	r25, 0x96	; 150
 baa:	11 c0       	rjmp	.+34     	; 0xbce <__floatsisf+0x6a>
 bac:	77 23       	and	r23, r23
 bae:	21 f0       	breq	.+8      	; 0xbb8 <__floatsisf+0x54>
 bb0:	9e e8       	ldi	r25, 0x8E	; 142
 bb2:	87 2f       	mov	r24, r23
 bb4:	76 2f       	mov	r23, r22
 bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__floatsisf+0x5e>
 bb8:	66 23       	and	r22, r22
 bba:	71 f0       	breq	.+28     	; 0xbd8 <__floatsisf+0x74>
 bbc:	96 e8       	ldi	r25, 0x86	; 134
 bbe:	86 2f       	mov	r24, r22
 bc0:	70 e0       	ldi	r23, 0x00	; 0
 bc2:	60 e0       	ldi	r22, 0x00	; 0
 bc4:	2a f0       	brmi	.+10     	; 0xbd0 <__floatsisf+0x6c>
 bc6:	9a 95       	dec	r25
 bc8:	66 0f       	add	r22, r22
 bca:	77 1f       	adc	r23, r23
 bcc:	88 1f       	adc	r24, r24
 bce:	da f7       	brpl	.-10     	; 0xbc6 <__floatsisf+0x62>
 bd0:	88 0f       	add	r24, r24
 bd2:	96 95       	lsr	r25
 bd4:	87 95       	ror	r24
 bd6:	97 f9       	bld	r25, 7
 bd8:	08 95       	ret

00000bda <__fp_cmp>:
 bda:	99 0f       	add	r25, r25
 bdc:	00 08       	sbc	r0, r0
 bde:	55 0f       	add	r21, r21
 be0:	aa 0b       	sbc	r26, r26
 be2:	e0 e8       	ldi	r30, 0x80	; 128
 be4:	fe ef       	ldi	r31, 0xFE	; 254
 be6:	16 16       	cp	r1, r22
 be8:	17 06       	cpc	r1, r23
 bea:	e8 07       	cpc	r30, r24
 bec:	f9 07       	cpc	r31, r25
 bee:	c0 f0       	brcs	.+48     	; 0xc20 <__fp_cmp+0x46>
 bf0:	12 16       	cp	r1, r18
 bf2:	13 06       	cpc	r1, r19
 bf4:	e4 07       	cpc	r30, r20
 bf6:	f5 07       	cpc	r31, r21
 bf8:	98 f0       	brcs	.+38     	; 0xc20 <__fp_cmp+0x46>
 bfa:	62 1b       	sub	r22, r18
 bfc:	73 0b       	sbc	r23, r19
 bfe:	84 0b       	sbc	r24, r20
 c00:	95 0b       	sbc	r25, r21
 c02:	39 f4       	brne	.+14     	; 0xc12 <__fp_cmp+0x38>
 c04:	0a 26       	eor	r0, r26
 c06:	61 f0       	breq	.+24     	; 0xc20 <__fp_cmp+0x46>
 c08:	23 2b       	or	r18, r19
 c0a:	24 2b       	or	r18, r20
 c0c:	25 2b       	or	r18, r21
 c0e:	21 f4       	brne	.+8      	; 0xc18 <__fp_cmp+0x3e>
 c10:	08 95       	ret
 c12:	0a 26       	eor	r0, r26
 c14:	09 f4       	brne	.+2      	; 0xc18 <__fp_cmp+0x3e>
 c16:	a1 40       	sbci	r26, 0x01	; 1
 c18:	a6 95       	lsr	r26
 c1a:	8f ef       	ldi	r24, 0xFF	; 255
 c1c:	81 1d       	adc	r24, r1
 c1e:	81 1d       	adc	r24, r1
 c20:	08 95       	ret

00000c22 <__fp_inf>:
 c22:	97 f9       	bld	r25, 7
 c24:	9f 67       	ori	r25, 0x7F	; 127
 c26:	80 e8       	ldi	r24, 0x80	; 128
 c28:	70 e0       	ldi	r23, 0x00	; 0
 c2a:	60 e0       	ldi	r22, 0x00	; 0
 c2c:	08 95       	ret

00000c2e <__fp_nan>:
 c2e:	9f ef       	ldi	r25, 0xFF	; 255
 c30:	80 ec       	ldi	r24, 0xC0	; 192
 c32:	08 95       	ret

00000c34 <__fp_powser>:
 c34:	df 93       	push	r29
 c36:	cf 93       	push	r28
 c38:	1f 93       	push	r17
 c3a:	0f 93       	push	r16
 c3c:	ff 92       	push	r15
 c3e:	ef 92       	push	r14
 c40:	df 92       	push	r13
 c42:	7b 01       	movw	r14, r22
 c44:	8c 01       	movw	r16, r24
 c46:	68 94       	set
 c48:	06 c0       	rjmp	.+12     	; 0xc56 <__fp_powser+0x22>
 c4a:	da 2e       	mov	r13, r26
 c4c:	ef 01       	movw	r28, r30
 c4e:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3x>
 c52:	fe 01       	movw	r30, r28
 c54:	e8 94       	clt
 c56:	a5 91       	lpm	r26, Z+
 c58:	25 91       	lpm	r18, Z+
 c5a:	35 91       	lpm	r19, Z+
 c5c:	45 91       	lpm	r20, Z+
 c5e:	55 91       	lpm	r21, Z+
 c60:	a6 f3       	brts	.-24     	; 0xc4a <__fp_powser+0x16>
 c62:	ef 01       	movw	r28, r30
 c64:	0e 94 3c 04 	call	0x878	; 0x878 <__addsf3x>
 c68:	fe 01       	movw	r30, r28
 c6a:	97 01       	movw	r18, r14
 c6c:	a8 01       	movw	r20, r16
 c6e:	da 94       	dec	r13
 c70:	69 f7       	brne	.-38     	; 0xc4c <__fp_powser+0x18>
 c72:	df 90       	pop	r13
 c74:	ef 90       	pop	r14
 c76:	ff 90       	pop	r15
 c78:	0f 91       	pop	r16
 c7a:	1f 91       	pop	r17
 c7c:	cf 91       	pop	r28
 c7e:	df 91       	pop	r29
 c80:	08 95       	ret

00000c82 <__fp_pscA>:
 c82:	00 24       	eor	r0, r0
 c84:	0a 94       	dec	r0
 c86:	16 16       	cp	r1, r22
 c88:	17 06       	cpc	r1, r23
 c8a:	18 06       	cpc	r1, r24
 c8c:	09 06       	cpc	r0, r25
 c8e:	08 95       	ret

00000c90 <__fp_pscB>:
 c90:	00 24       	eor	r0, r0
 c92:	0a 94       	dec	r0
 c94:	12 16       	cp	r1, r18
 c96:	13 06       	cpc	r1, r19
 c98:	14 06       	cpc	r1, r20
 c9a:	05 06       	cpc	r0, r21
 c9c:	08 95       	ret

00000c9e <__fp_round>:
 c9e:	09 2e       	mov	r0, r25
 ca0:	03 94       	inc	r0
 ca2:	00 0c       	add	r0, r0
 ca4:	11 f4       	brne	.+4      	; 0xcaa <__fp_round+0xc>
 ca6:	88 23       	and	r24, r24
 ca8:	52 f0       	brmi	.+20     	; 0xcbe <__fp_round+0x20>
 caa:	bb 0f       	add	r27, r27
 cac:	40 f4       	brcc	.+16     	; 0xcbe <__fp_round+0x20>
 cae:	bf 2b       	or	r27, r31
 cb0:	11 f4       	brne	.+4      	; 0xcb6 <__fp_round+0x18>
 cb2:	60 ff       	sbrs	r22, 0
 cb4:	04 c0       	rjmp	.+8      	; 0xcbe <__fp_round+0x20>
 cb6:	6f 5f       	subi	r22, 0xFF	; 255
 cb8:	7f 4f       	sbci	r23, 0xFF	; 255
 cba:	8f 4f       	sbci	r24, 0xFF	; 255
 cbc:	9f 4f       	sbci	r25, 0xFF	; 255
 cbe:	08 95       	ret

00000cc0 <__fp_split3>:
 cc0:	57 fd       	sbrc	r21, 7
 cc2:	90 58       	subi	r25, 0x80	; 128
 cc4:	44 0f       	add	r20, r20
 cc6:	55 1f       	adc	r21, r21
 cc8:	59 f0       	breq	.+22     	; 0xce0 <__fp_splitA+0x10>
 cca:	5f 3f       	cpi	r21, 0xFF	; 255
 ccc:	71 f0       	breq	.+28     	; 0xcea <__fp_splitA+0x1a>
 cce:	47 95       	ror	r20

00000cd0 <__fp_splitA>:
 cd0:	88 0f       	add	r24, r24
 cd2:	97 fb       	bst	r25, 7
 cd4:	99 1f       	adc	r25, r25
 cd6:	61 f0       	breq	.+24     	; 0xcf0 <__fp_splitA+0x20>
 cd8:	9f 3f       	cpi	r25, 0xFF	; 255
 cda:	79 f0       	breq	.+30     	; 0xcfa <__fp_splitA+0x2a>
 cdc:	87 95       	ror	r24
 cde:	08 95       	ret
 ce0:	12 16       	cp	r1, r18
 ce2:	13 06       	cpc	r1, r19
 ce4:	14 06       	cpc	r1, r20
 ce6:	55 1f       	adc	r21, r21
 ce8:	f2 cf       	rjmp	.-28     	; 0xcce <__fp_split3+0xe>
 cea:	46 95       	lsr	r20
 cec:	f1 df       	rcall	.-30     	; 0xcd0 <__fp_splitA>
 cee:	08 c0       	rjmp	.+16     	; 0xd00 <__fp_splitA+0x30>
 cf0:	16 16       	cp	r1, r22
 cf2:	17 06       	cpc	r1, r23
 cf4:	18 06       	cpc	r1, r24
 cf6:	99 1f       	adc	r25, r25
 cf8:	f1 cf       	rjmp	.-30     	; 0xcdc <__fp_splitA+0xc>
 cfa:	86 95       	lsr	r24
 cfc:	71 05       	cpc	r23, r1
 cfe:	61 05       	cpc	r22, r1
 d00:	08 94       	sec
 d02:	08 95       	ret

00000d04 <__fp_zero>:
 d04:	e8 94       	clt

00000d06 <__fp_szero>:
 d06:	bb 27       	eor	r27, r27
 d08:	66 27       	eor	r22, r22
 d0a:	77 27       	eor	r23, r23
 d0c:	cb 01       	movw	r24, r22
 d0e:	97 f9       	bld	r25, 7
 d10:	08 95       	ret

00000d12 <__gesf2>:
 d12:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_cmp>
 d16:	08 f4       	brcc	.+2      	; 0xd1a <__gesf2+0x8>
 d18:	8f ef       	ldi	r24, 0xFF	; 255
 d1a:	08 95       	ret

00000d1c <inverse>:
 d1c:	9b 01       	movw	r18, r22
 d1e:	ac 01       	movw	r20, r24
 d20:	60 e0       	ldi	r22, 0x00	; 0
 d22:	70 e0       	ldi	r23, 0x00	; 0
 d24:	80 e8       	ldi	r24, 0x80	; 128
 d26:	9f e3       	ldi	r25, 0x3F	; 63
 d28:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__divsf3>

00000d2c <__mulsf3>:
 d2c:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3x>
 d30:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_round>
 d34:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_pscA>
 d38:	38 f0       	brcs	.+14     	; 0xd48 <__mulsf3+0x1c>
 d3a:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_pscB>
 d3e:	20 f0       	brcs	.+8      	; 0xd48 <__mulsf3+0x1c>
 d40:	95 23       	and	r25, r21
 d42:	11 f0       	breq	.+4      	; 0xd48 <__mulsf3+0x1c>
 d44:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
 d48:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_nan>
 d4c:	11 24       	eor	r1, r1
 d4e:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__fp_szero>

00000d52 <__mulsf3x>:
 d52:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_split3>
 d56:	70 f3       	brcs	.-36     	; 0xd34 <__mulsf3+0x8>

00000d58 <__mulsf3_pse>:
 d58:	95 9f       	mul	r25, r21
 d5a:	c1 f3       	breq	.-16     	; 0xd4c <__mulsf3+0x20>
 d5c:	95 0f       	add	r25, r21
 d5e:	50 e0       	ldi	r21, 0x00	; 0
 d60:	55 1f       	adc	r21, r21
 d62:	62 9f       	mul	r22, r18
 d64:	f0 01       	movw	r30, r0
 d66:	72 9f       	mul	r23, r18
 d68:	bb 27       	eor	r27, r27
 d6a:	f0 0d       	add	r31, r0
 d6c:	b1 1d       	adc	r27, r1
 d6e:	63 9f       	mul	r22, r19
 d70:	aa 27       	eor	r26, r26
 d72:	f0 0d       	add	r31, r0
 d74:	b1 1d       	adc	r27, r1
 d76:	aa 1f       	adc	r26, r26
 d78:	64 9f       	mul	r22, r20
 d7a:	66 27       	eor	r22, r22
 d7c:	b0 0d       	add	r27, r0
 d7e:	a1 1d       	adc	r26, r1
 d80:	66 1f       	adc	r22, r22
 d82:	82 9f       	mul	r24, r18
 d84:	22 27       	eor	r18, r18
 d86:	b0 0d       	add	r27, r0
 d88:	a1 1d       	adc	r26, r1
 d8a:	62 1f       	adc	r22, r18
 d8c:	73 9f       	mul	r23, r19
 d8e:	b0 0d       	add	r27, r0
 d90:	a1 1d       	adc	r26, r1
 d92:	62 1f       	adc	r22, r18
 d94:	83 9f       	mul	r24, r19
 d96:	a0 0d       	add	r26, r0
 d98:	61 1d       	adc	r22, r1
 d9a:	22 1f       	adc	r18, r18
 d9c:	74 9f       	mul	r23, r20
 d9e:	33 27       	eor	r19, r19
 da0:	a0 0d       	add	r26, r0
 da2:	61 1d       	adc	r22, r1
 da4:	23 1f       	adc	r18, r19
 da6:	84 9f       	mul	r24, r20
 da8:	60 0d       	add	r22, r0
 daa:	21 1d       	adc	r18, r1
 dac:	82 2f       	mov	r24, r18
 dae:	76 2f       	mov	r23, r22
 db0:	6a 2f       	mov	r22, r26
 db2:	11 24       	eor	r1, r1
 db4:	9f 57       	subi	r25, 0x7F	; 127
 db6:	50 40       	sbci	r21, 0x00	; 0
 db8:	9a f0       	brmi	.+38     	; 0xde0 <__mulsf3_pse+0x88>
 dba:	f1 f0       	breq	.+60     	; 0xdf8 <__mulsf3_pse+0xa0>
 dbc:	88 23       	and	r24, r24
 dbe:	4a f0       	brmi	.+18     	; 0xdd2 <__mulsf3_pse+0x7a>
 dc0:	ee 0f       	add	r30, r30
 dc2:	ff 1f       	adc	r31, r31
 dc4:	bb 1f       	adc	r27, r27
 dc6:	66 1f       	adc	r22, r22
 dc8:	77 1f       	adc	r23, r23
 dca:	88 1f       	adc	r24, r24
 dcc:	91 50       	subi	r25, 0x01	; 1
 dce:	50 40       	sbci	r21, 0x00	; 0
 dd0:	a9 f7       	brne	.-22     	; 0xdbc <__mulsf3_pse+0x64>
 dd2:	9e 3f       	cpi	r25, 0xFE	; 254
 dd4:	51 05       	cpc	r21, r1
 dd6:	80 f0       	brcs	.+32     	; 0xdf8 <__mulsf3_pse+0xa0>
 dd8:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
 ddc:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__fp_szero>
 de0:	5f 3f       	cpi	r21, 0xFF	; 255
 de2:	e4 f3       	brlt	.-8      	; 0xddc <__mulsf3_pse+0x84>
 de4:	98 3e       	cpi	r25, 0xE8	; 232
 de6:	d4 f3       	brlt	.-12     	; 0xddc <__mulsf3_pse+0x84>
 de8:	86 95       	lsr	r24
 dea:	77 95       	ror	r23
 dec:	67 95       	ror	r22
 dee:	b7 95       	ror	r27
 df0:	f7 95       	ror	r31
 df2:	e7 95       	ror	r30
 df4:	9f 5f       	subi	r25, 0xFF	; 255
 df6:	c1 f7       	brne	.-16     	; 0xde8 <__mulsf3_pse+0x90>
 df8:	fe 2b       	or	r31, r30
 dfa:	88 0f       	add	r24, r24
 dfc:	91 1d       	adc	r25, r1
 dfe:	96 95       	lsr	r25
 e00:	87 95       	ror	r24
 e02:	97 f9       	bld	r25, 7
 e04:	08 95       	ret

00000e06 <square>:
 e06:	9b 01       	movw	r18, r22
 e08:	ac 01       	movw	r20, r24
 e0a:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__mulsf3>

00000e0e <__udivmodsi4>:
 e0e:	a1 e2       	ldi	r26, 0x21	; 33
 e10:	1a 2e       	mov	r1, r26
 e12:	aa 1b       	sub	r26, r26
 e14:	bb 1b       	sub	r27, r27
 e16:	fd 01       	movw	r30, r26
 e18:	0d c0       	rjmp	.+26     	; 0xe34 <__udivmodsi4_ep>

00000e1a <__udivmodsi4_loop>:
 e1a:	aa 1f       	adc	r26, r26
 e1c:	bb 1f       	adc	r27, r27
 e1e:	ee 1f       	adc	r30, r30
 e20:	ff 1f       	adc	r31, r31
 e22:	a2 17       	cp	r26, r18
 e24:	b3 07       	cpc	r27, r19
 e26:	e4 07       	cpc	r30, r20
 e28:	f5 07       	cpc	r31, r21
 e2a:	20 f0       	brcs	.+8      	; 0xe34 <__udivmodsi4_ep>
 e2c:	a2 1b       	sub	r26, r18
 e2e:	b3 0b       	sbc	r27, r19
 e30:	e4 0b       	sbc	r30, r20
 e32:	f5 0b       	sbc	r31, r21

00000e34 <__udivmodsi4_ep>:
 e34:	66 1f       	adc	r22, r22
 e36:	77 1f       	adc	r23, r23
 e38:	88 1f       	adc	r24, r24
 e3a:	99 1f       	adc	r25, r25
 e3c:	1a 94       	dec	r1
 e3e:	69 f7       	brne	.-38     	; 0xe1a <__udivmodsi4_loop>
 e40:	60 95       	com	r22
 e42:	70 95       	com	r23
 e44:	80 95       	com	r24
 e46:	90 95       	com	r25
 e48:	9b 01       	movw	r18, r22
 e4a:	ac 01       	movw	r20, r24
 e4c:	bd 01       	movw	r22, r26
 e4e:	cf 01       	movw	r24, r30
 e50:	08 95       	ret

00000e52 <_exit>:
 e52:	f8 94       	cli

00000e54 <__stop_program>:
 e54:	ff cf       	rjmp	.-2      	; 0xe54 <__stop_program>
