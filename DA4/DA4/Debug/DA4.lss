
DA4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a2  00800100  000009ee  00000a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008003a2  008003a2  00000d24  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da2  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4e  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050d  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00002b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056a  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025e  00000000  00000000  000031ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_14>
  3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  48:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_18>
  4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  8c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  90:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  94:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  98:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  9c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  a0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  a4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  a8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  ac:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  b0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  b4:	8d 01       	movw	r16, r26
  b6:	92 01       	movw	r18, r4
  b8:	92 01       	movw	r18, r4
  ba:	92 01       	movw	r18, r4
  bc:	92 01       	movw	r18, r4
  be:	92 01       	movw	r18, r4
  c0:	92 01       	movw	r18, r4
  c2:	92 01       	movw	r18, r4
  c4:	92 01       	movw	r18, r4
  c6:	92 01       	movw	r18, r4
  c8:	92 01       	movw	r18, r4
  ca:	92 01       	movw	r18, r4
  cc:	92 01       	movw	r18, r4
  ce:	92 01       	movw	r18, r4
  d0:	69 01       	movw	r12, r18
  d2:	79 01       	movw	r14, r18
  d4:	92 01       	movw	r18, r4
  d6:	92 01       	movw	r18, r4
  d8:	92 01       	movw	r18, r4
  da:	92 01       	movw	r18, r4
  dc:	92 01       	movw	r18, r4
  de:	92 01       	movw	r18, r4
  e0:	92 01       	movw	r18, r4
  e2:	92 01       	movw	r18, r4
  e4:	92 01       	movw	r18, r4
  e6:	92 01       	movw	r18, r4
  e8:	92 01       	movw	r18, r4
  ea:	92 01       	movw	r18, r4
  ec:	92 01       	movw	r18, r4
  ee:	92 01       	movw	r18, r4
  f0:	92 01       	movw	r18, r4
  f2:	92 01       	movw	r18, r4
  f4:	87 01       	movw	r16, r14
  f6:	72 01       	movw	r14, r4
  f8:	92 01       	movw	r18, r4
  fa:	92 01       	movw	r18, r4
  fc:	92 01       	movw	r18, r4
  fe:	92 01       	movw	r18, r4
 100:	92 01       	movw	r18, r4
 102:	59 01       	movw	r10, r18
 104:	92 01       	movw	r18, r4
 106:	92 01       	movw	r18, r4
 108:	92 01       	movw	r18, r4
 10a:	92 01       	movw	r18, r4
 10c:	92 01       	movw	r18, r4
 10e:	92 01       	movw	r18, r4
 110:	60 01       	movw	r12, r0

00000112 <__ctors_end>:
 112:	11 24       	eor	r1, r1
 114:	1f be       	out	0x3f, r1	; 63
 116:	cf ef       	ldi	r28, 0xFF	; 255
 118:	d8 e0       	ldi	r29, 0x08	; 8
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
 11e:	13 e0       	ldi	r17, 0x03	; 3
 120:	a0 e0       	ldi	r26, 0x00	; 0
 122:	b1 e0       	ldi	r27, 0x01	; 1
 124:	ee ee       	ldi	r30, 0xEE	; 238
 126:	f9 e0       	ldi	r31, 0x09	; 9
 128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x10>
 12a:	05 90       	lpm	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	a2 3a       	cpi	r26, 0xA2	; 162
 130:	b1 07       	cpc	r27, r17
 132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0xc>

00000134 <__do_clear_bss>:
 134:	23 e0       	ldi	r18, 0x03	; 3
 136:	a2 ea       	ldi	r26, 0xA2	; 162
 138:	b3 e0       	ldi	r27, 0x03	; 3
 13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
 13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
 13e:	a8 3a       	cpi	r26, 0xA8	; 168
 140:	b2 07       	cpc	r27, r18
 142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
 144:	0e 94 b1 01 	call	0x362	; 0x362 <main>
 148:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <_exit>

0000014c <__bad_interrupt>:
 14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <UART_init>:
void read_adc(void);

void UART_init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 150:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 154:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Enable transmitter and receiver and reciever interrupt
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
 158:	88 e9       	ldi	r24, 0x98	; 152
 15a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	 
	//Set frame format: 8 bits data, 1 stop bit
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);	
 15e:	e2 ec       	ldi	r30, 0xC2	; 194
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	86 60       	ori	r24, 0x06	; 6
 166:	80 83       	st	Z, r24
	
	sei();
 168:	78 94       	sei
 16a:	08 95       	ret

0000016c <timer_init>:
}

void timer_init(void)
{
	TCCR0A |= (1<<WGM01);		//Set Timer1 to CTC mode
 16c:	84 b5       	in	r24, 0x24	; 36
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) | (1<<CS00);	//Set prescaler to 1024
 172:	85 b5       	in	r24, 0x25	; 37
 174:	83 60       	ori	r24, 0x03	; 3
 176:	85 bd       	out	0x25, r24	; 37
	OCR0A = 124;				//Load compare register value
 178:	8c e7       	ldi	r24, 0x7C	; 124
 17a:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);	//Set interrupt on compare match
 17c:	ee e6       	ldi	r30, 0x6E	; 110
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	82 60       	ori	r24, 0x02	; 2
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

00000188 <led_init>:
}

void led_init(void)
{
	DDRB |= (1<<3) | (1<<5);	//Set PB5 and PB3 to outputs for LED
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	88 62       	ori	r24, 0x28	; 40
 18c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<3) | (1<<5);	//Turn off LEDs initially
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	88 62       	ori	r24, 0x28	; 40
 192:	85 b9       	out	0x05, r24	; 5
 194:	08 95       	ret

00000196 <adc_init>:
}

void adc_init(void)
{
	// AVcc with external capacitor on AREF pin. Right adjusted result. ADC0 selected for PC0
	ADMUX = (0<<REFS1) | (1<<REFS0) | (0<<ADLAR) | (0<<MUX2) | (0<<MUX1) | (0<<MUX0);
 196:	80 e4       	ldi	r24, 0x40	; 64
 198:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// Set the prescaler to 32. Don't enable the ADC until it is needed
	ADCSRA = (0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
 19c:	85 e0       	ldi	r24, 0x05	; 5
 19e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1a2:	08 95       	ret

000001a4 <turn_on_led>:
}

void turn_on_led(void)
{
	PORTB &= ~(1<<5); //Turn on PB5 LED
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	8f 7d       	andi	r24, 0xDF	; 223
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	08 95       	ret

000001ac <turn_off_led>:
}

void turn_off_led(void)
{
	PORTB |= (1<<5); //Turn off PB5 LED
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	85 b9       	out	0x05, r24	; 5
 1b2:	08 95       	ret

000001b4 <__vector_14>:
			break;
	}
}

ISR(TIMER0_COMPA_vect) 
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
	static int overflows = 0;	// Variable to track timer overflows
	if (blink_enable == 1){		// Check if blink has been enabled
 1c4:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <blink_enable>
 1c8:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <blink_enable+0x1>
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	a1 f4       	brne	.+40     	; 0x1f8 <__vector_14+0x44>
		overflows++;			// Increment overflows until we reach the value that gives us 1 second
 1d0:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <__data_end>
 1d4:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <__data_end+0x1>
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <__data_end+0x1>
 1de:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <__data_end>
		if (overflows == OVERFLOW_MAX) {	
 1e2:	88 3e       	cpi	r24, 0xE8	; 232
 1e4:	93 40       	sbci	r25, 0x03	; 3
 1e6:	41 f4       	brne	.+16     	; 0x1f8 <__vector_14+0x44>
			PORTB ^= (1<<3);	//Toggle the PB3 LED
 1e8:	95 b1       	in	r25, 0x05	; 5
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	89 27       	eor	r24, r25
 1ee:	85 b9       	out	0x05, r24	; 5
			overflows = 0;
 1f0:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <__data_end+0x1>
 1f4:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <__data_end>
		}
	}
}	
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <UART_transmit_string>:

void UART_transmit_string(char *data) {
 208:	fc 01       	movw	r30, r24
	while ((*data != '\0')) {	// Check if NULL char
 20a:	07 c0       	rjmp	.+14     	; 0x21a <UART_transmit_string+0x12>
		while (!(UCSR0A & (1 <<UDRE0)));	// Wait for register to be 
 20c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 210:	95 ff       	sbrs	r25, 5
 212:	fc cf       	rjmp	.-8      	; 0x20c <UART_transmit_string+0x4>
		UDR0 = *data;	// Store data in the data register
 214:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		data++;
 218:	31 96       	adiw	r30, 0x01	; 1
		}
	}
}	

void UART_transmit_string(char *data) {
	while ((*data != '\0')) {	// Check if NULL char
 21a:	80 81       	ld	r24, Z
 21c:	81 11       	cpse	r24, r1
 21e:	f6 cf       	rjmp	.-20     	; 0x20c <UART_transmit_string+0x4>
		while (!(UCSR0A & (1 <<UDRE0)));	// Wait for register to be 
		UDR0 = *data;	// Store data in the data register
		data++;
	}
}
 220:	08 95       	ret

00000222 <help_menu>:
	PORTB |= (1<<5); //Turn off PB5 LED
}

void help_menu(void)
{
	UART_transmit_string("***********************************DA4 Help Screen:***********************************\n");
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'h'\t Displays a help screen to lists all keys and functionalities\n");
 22a:	88 e5       	ldi	r24, 0x58	; 88
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'o'\t Turns on LED connected to PB5\n");
 232:	8b e9       	ldi	r24, 0x9B	; 155
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'O'\t Turns off LED connected to PB5\n");
 23a:	8f eb       	ldi	r24, 0xBF	; 191
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'b'\t Blinks the LED connected to PB3 continuously every second\n");
 242:	84 ee       	ldi	r24, 0xE4	; 228
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'P'\t Turns off the LED connected to PB3\n");
 24a:	84 e2       	ldi	r24, 0x24	; 36
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'a'\t Reads and displays the ADC value from the potentiometer connected to AC0/PC0\n");
 252:	8d e4       	ldi	r24, 0x4D	; 77
 254:	92 e0       	ldi	r25, 0x02	; 2
 256:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("\t ^ Please note that the ADC must be stopped before taking other inputs\n");
 25a:	80 ea       	ldi	r24, 0xA0	; 160
 25c:	92 e0       	ldi	r25, 0x02	; 2
 25e:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'A'\t Stops reading the ADC value from the potentiometer connected to AC0/PC0\n");
 262:	89 ee       	ldi	r24, 0xE9	; 233
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("**************************************************************************************\n\n");
 26a:	87 e3       	ldi	r24, 0x37	; 55
 26c:	93 e0       	ldi	r25, 0x03	; 3
 26e:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
 272:	08 95       	ret

00000274 <__vector_18>:
}

ISR(USART0_RX_vect) 
{
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	4f 93       	push	r20
 284:	5f 93       	push	r21
 286:	6f 93       	push	r22
 288:	7f 93       	push	r23
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
	// Get data from the USART data register
	unsigned char data = UDR0;
 296:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	switch(data)
 29a:	8e 2f       	mov	r24, r30
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	fc 01       	movw	r30, r24
 2a0:	e1 54       	subi	r30, 0x41	; 65
 2a2:	f1 09       	sbc	r31, r1
 2a4:	ef 32       	cpi	r30, 0x2F	; 47
 2a6:	f1 05       	cpc	r31, r1
 2a8:	e8 f5       	brcc	.+122    	; 0x324 <__vector_18+0xb0>
 2aa:	e6 5a       	subi	r30, 0xA6	; 166
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__tablejump2__>
	{
		case 'h':
			if (!(ADCSRA & (1 << ADEN)))	// Break if ADC is being read
 2b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2b6:	88 23       	and	r24, r24
 2b8:	ac f1       	brlt	.+106    	; 0x324 <__vector_18+0xb0>
				help_menu();
 2ba:	0e 94 11 01 	call	0x222	; 0x222 <help_menu>
 2be:	32 c0       	rjmp	.+100    	; 0x324 <__vector_18+0xb0>
			break;
		case 'o':
			if (ADCSRA & ~(1 << ADEN))
 2c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	8f 77       	andi	r24, 0x7F	; 127
 2c8:	89 2b       	or	r24, r25
 2ca:	61 f1       	breq	.+88     	; 0x324 <__vector_18+0xb0>
				turn_on_led();
 2cc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <turn_on_led>
 2d0:	29 c0       	rjmp	.+82     	; 0x324 <__vector_18+0xb0>
			break;
		case 'O':
			if (ADCSRA & ~(1 << ADEN))
 2d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	8f 77       	andi	r24, 0x7F	; 127
 2da:	89 2b       	or	r24, r25
 2dc:	19 f1       	breq	.+70     	; 0x324 <__vector_18+0xb0>
				turn_off_led();
 2de:	0e 94 d6 00 	call	0x1ac	; 0x1ac <turn_off_led>
 2e2:	20 c0       	rjmp	.+64     	; 0x324 <__vector_18+0xb0>
			break;
		case 'b':
			blink_enable = 1;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <blink_enable+0x1>
 2ec:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <blink_enable>
			break;
 2f0:	19 c0       	rjmp	.+50     	; 0x324 <__vector_18+0xb0>
		case 'P':
			if (ADCSRA & ~(1 << ADEN))
 2f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	8f 77       	andi	r24, 0x7F	; 127
 2fa:	89 2b       	or	r24, r25
 2fc:	21 f0       	breq	.+8      	; 0x306 <__vector_18+0x92>
				blink_enable = 0;
 2fe:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <blink_enable+0x1>
 302:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <blink_enable>
			PORTB |= (1<<3); //Turn LED off
 306:	85 b1       	in	r24, 0x05	; 5
 308:	88 60       	ori	r24, 0x08	; 8
 30a:	85 b9       	out	0x05, r24	; 5
			break;
 30c:	0b c0       	rjmp	.+22     	; 0x324 <__vector_18+0xb0>
		case 'a':
			ADCSRA |= (1<<ADEN);	// Enable the ADC to start reading potentiometer
 30e:	ea e7       	ldi	r30, 0x7A	; 122
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	80 68       	ori	r24, 0x80	; 128
 316:	80 83       	st	Z, r24
			break;
 318:	05 c0       	rjmp	.+10     	; 0x324 <__vector_18+0xb0>
		case 'A':
			ADCSRA &= ~(1<<ADEN);	// Disable the ADC to stop reading potentiometer
 31a:	ea e7       	ldi	r30, 0x7A	; 122
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	8f 77       	andi	r24, 0x7F	; 127
 322:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	5f 91       	pop	r21
 336:	4f 91       	pop	r20
 338:	3f 91       	pop	r19
 33a:	2f 91       	pop	r18
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <read_adc>:
	}
}

void read_adc(void)
{
	ADCSRA |= (1<<ADSC); // Start a conversion
 346:	ea e7       	ldi	r30, 0x7A	; 122
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	80 64       	ori	r24, 0x40	; 64
 34e:	80 83       	st	Z, r24
	adc_temp = ADC;		// Read the ADC value into the temp variable to be used later
 350:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 354:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 358:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <adc_temp+0x1>
 35c:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <adc_temp>
 360:	08 95       	ret

00000362 <main>:
}


int main(void)
{
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	28 97       	sbiw	r28, 0x08	; 8
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);	//Initialize USART
 376:	87 e6       	ldi	r24, 0x67	; 103
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 a8 00 	call	0x150	; 0x150 <UART_init>
	UART_transmit_string("Connected!\n");	//Welcome message
 37e:	80 e9       	ldi	r24, 0x90	; 144
 380:	93 e0       	ldi	r25, 0x03	; 3
 382:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	timer_init();		//Initialize Timer
 386:	0e 94 b6 00 	call	0x16c	; 0x16c <timer_init>
	led_init();			//Initialize LEDs
 38a:	0e 94 c4 00 	call	0x188	; 0x188 <led_init>
	adc_init();			//Initialize ADC
 38e:	0e 94 cb 00 	call	0x196	; 0x196 <adc_init>
	help_menu();		//Print the help menu upon startup/reboot
 392:	0e 94 11 01 	call	0x222	; 0x222 <help_menu>
    
	while (1) {
		if (ADCSRA & (1 << ADEN))	//Check if ADC has been enabled
 396:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 39a:	88 23       	and	r24, r24
 39c:	e4 f7       	brge	.-8      	; 0x396 <main+0x34>
		{
			char buffer[8];		//8-bit buffer to read ADC
			read_adc();
 39e:	0e 94 a3 01 	call	0x346	; 0x346 <read_adc>
			snprintf(buffer, sizeof(buffer), "%d\r\n", adc_temp);	//Read the adc value into the buffer
 3a2:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <adc_temp>
 3a6:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <adc_temp+0x1>
 3aa:	9f 93       	push	r25
 3ac:	8f 93       	push	r24
 3ae:	8c e9       	ldi	r24, 0x9C	; 156
 3b0:	93 e0       	ldi	r25, 0x03	; 3
 3b2:	9f 93       	push	r25
 3b4:	8f 93       	push	r24
 3b6:	1f 92       	push	r1
 3b8:	88 e0       	ldi	r24, 0x08	; 8
 3ba:	8f 93       	push	r24
 3bc:	8e 01       	movw	r16, r28
 3be:	0f 5f       	subi	r16, 0xFF	; 255
 3c0:	1f 4f       	sbci	r17, 0xFF	; 255
 3c2:	1f 93       	push	r17
 3c4:	0f 93       	push	r16
 3c6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <snprintf>
			UART_transmit_string(buffer);	//Send the adc value to the terminal
 3ca:	c8 01       	movw	r24, r16
 3cc:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d0:	2f ef       	ldi	r18, 0xFF	; 255
 3d2:	81 ee       	ldi	r24, 0xE1	; 225
 3d4:	94 e0       	ldi	r25, 0x04	; 4
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x74>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x7e>
 3e0:	00 00       	nop
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	d4 cf       	rjmp	.-88     	; 0x396 <main+0x34>

000003ee <__tablejump2__>:
 3ee:	ee 0f       	add	r30, r30
 3f0:	ff 1f       	adc	r31, r31
 3f2:	05 90       	lpm	r0, Z+
 3f4:	f4 91       	lpm	r31, Z
 3f6:	e0 2d       	mov	r30, r0
 3f8:	09 94       	ijmp

000003fa <snprintf>:
 3fa:	ae e0       	ldi	r26, 0x0E	; 14
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	e3 e0       	ldi	r30, 0x03	; 3
 400:	f2 e0       	ldi	r31, 0x02	; 2
 402:	0c 94 cc 04 	jmp	0x998	; 0x998 <__prologue_saves__+0x1c>
 406:	0d 89       	ldd	r16, Y+21	; 0x15
 408:	1e 89       	ldd	r17, Y+22	; 0x16
 40a:	8f 89       	ldd	r24, Y+23	; 0x17
 40c:	98 8d       	ldd	r25, Y+24	; 0x18
 40e:	26 e0       	ldi	r18, 0x06	; 6
 410:	2c 83       	std	Y+4, r18	; 0x04
 412:	1a 83       	std	Y+2, r17	; 0x02
 414:	09 83       	std	Y+1, r16	; 0x01
 416:	97 ff       	sbrs	r25, 7
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e8       	ldi	r25, 0x80	; 128
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	9e 83       	std	Y+6, r25	; 0x06
 422:	8d 83       	std	Y+5, r24	; 0x05
 424:	ae 01       	movw	r20, r28
 426:	45 5e       	subi	r20, 0xE5	; 229
 428:	5f 4f       	sbci	r21, 0xFF	; 255
 42a:	69 8d       	ldd	r22, Y+25	; 0x19
 42c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 42e:	ce 01       	movw	r24, r28
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	0e 94 2d 02 	call	0x45a	; 0x45a <vfprintf>
 436:	4d 81       	ldd	r20, Y+5	; 0x05
 438:	5e 81       	ldd	r21, Y+6	; 0x06
 43a:	57 fd       	sbrc	r21, 7
 43c:	0a c0       	rjmp	.+20     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 43e:	2f 81       	ldd	r18, Y+7	; 0x07
 440:	38 85       	ldd	r19, Y+8	; 0x08
 442:	42 17       	cp	r20, r18
 444:	53 07       	cpc	r21, r19
 446:	0c f4       	brge	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 448:	9a 01       	movw	r18, r20
 44a:	f8 01       	movw	r30, r16
 44c:	e2 0f       	add	r30, r18
 44e:	f3 1f       	adc	r31, r19
 450:	10 82       	st	Z, r1
 452:	2e 96       	adiw	r28, 0x0e	; 14
 454:	e4 e0       	ldi	r30, 0x04	; 4
 456:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__epilogue_restores__+0x1c>

0000045a <vfprintf>:
 45a:	ab e0       	ldi	r26, 0x0B	; 11
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	e3 e3       	ldi	r30, 0x33	; 51
 460:	f2 e0       	ldi	r31, 0x02	; 2
 462:	0c 94 be 04 	jmp	0x97c	; 0x97c <__prologue_saves__>
 466:	6c 01       	movw	r12, r24
 468:	7b 01       	movw	r14, r22
 46a:	8a 01       	movw	r16, r20
 46c:	fc 01       	movw	r30, r24
 46e:	17 82       	std	Z+7, r1	; 0x07
 470:	16 82       	std	Z+6, r1	; 0x06
 472:	83 81       	ldd	r24, Z+3	; 0x03
 474:	81 ff       	sbrs	r24, 1
 476:	cc c1       	rjmp	.+920    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 478:	ce 01       	movw	r24, r28
 47a:	01 96       	adiw	r24, 0x01	; 1
 47c:	3c 01       	movw	r6, r24
 47e:	f6 01       	movw	r30, r12
 480:	93 81       	ldd	r25, Z+3	; 0x03
 482:	f7 01       	movw	r30, r14
 484:	93 fd       	sbrc	r25, 3
 486:	85 91       	lpm	r24, Z+
 488:	93 ff       	sbrs	r25, 3
 48a:	81 91       	ld	r24, Z+
 48c:	7f 01       	movw	r14, r30
 48e:	88 23       	and	r24, r24
 490:	09 f4       	brne	.+2      	; 0x494 <vfprintf+0x3a>
 492:	ba c1       	rjmp	.+884    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 494:	85 32       	cpi	r24, 0x25	; 37
 496:	39 f4       	brne	.+14     	; 0x4a6 <vfprintf+0x4c>
 498:	93 fd       	sbrc	r25, 3
 49a:	85 91       	lpm	r24, Z+
 49c:	93 ff       	sbrs	r25, 3
 49e:	81 91       	ld	r24, Z+
 4a0:	7f 01       	movw	r14, r30
 4a2:	85 32       	cpi	r24, 0x25	; 37
 4a4:	29 f4       	brne	.+10     	; 0x4b0 <vfprintf+0x56>
 4a6:	b6 01       	movw	r22, r12
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
 4ae:	e7 cf       	rjmp	.-50     	; 0x47e <vfprintf+0x24>
 4b0:	91 2c       	mov	r9, r1
 4b2:	21 2c       	mov	r2, r1
 4b4:	31 2c       	mov	r3, r1
 4b6:	ff e1       	ldi	r31, 0x1F	; 31
 4b8:	f3 15       	cp	r31, r3
 4ba:	d8 f0       	brcs	.+54     	; 0x4f2 <vfprintf+0x98>
 4bc:	8b 32       	cpi	r24, 0x2B	; 43
 4be:	79 f0       	breq	.+30     	; 0x4de <vfprintf+0x84>
 4c0:	38 f4       	brcc	.+14     	; 0x4d0 <vfprintf+0x76>
 4c2:	80 32       	cpi	r24, 0x20	; 32
 4c4:	79 f0       	breq	.+30     	; 0x4e4 <vfprintf+0x8a>
 4c6:	83 32       	cpi	r24, 0x23	; 35
 4c8:	a1 f4       	brne	.+40     	; 0x4f2 <vfprintf+0x98>
 4ca:	23 2d       	mov	r18, r3
 4cc:	20 61       	ori	r18, 0x10	; 16
 4ce:	1d c0       	rjmp	.+58     	; 0x50a <vfprintf+0xb0>
 4d0:	8d 32       	cpi	r24, 0x2D	; 45
 4d2:	61 f0       	breq	.+24     	; 0x4ec <vfprintf+0x92>
 4d4:	80 33       	cpi	r24, 0x30	; 48
 4d6:	69 f4       	brne	.+26     	; 0x4f2 <vfprintf+0x98>
 4d8:	23 2d       	mov	r18, r3
 4da:	21 60       	ori	r18, 0x01	; 1
 4dc:	16 c0       	rjmp	.+44     	; 0x50a <vfprintf+0xb0>
 4de:	83 2d       	mov	r24, r3
 4e0:	82 60       	ori	r24, 0x02	; 2
 4e2:	38 2e       	mov	r3, r24
 4e4:	e3 2d       	mov	r30, r3
 4e6:	e4 60       	ori	r30, 0x04	; 4
 4e8:	3e 2e       	mov	r3, r30
 4ea:	2a c0       	rjmp	.+84     	; 0x540 <vfprintf+0xe6>
 4ec:	f3 2d       	mov	r31, r3
 4ee:	f8 60       	ori	r31, 0x08	; 8
 4f0:	1d c0       	rjmp	.+58     	; 0x52c <vfprintf+0xd2>
 4f2:	37 fc       	sbrc	r3, 7
 4f4:	2d c0       	rjmp	.+90     	; 0x550 <vfprintf+0xf6>
 4f6:	20 ed       	ldi	r18, 0xD0	; 208
 4f8:	28 0f       	add	r18, r24
 4fa:	2a 30       	cpi	r18, 0x0A	; 10
 4fc:	40 f0       	brcs	.+16     	; 0x50e <vfprintf+0xb4>
 4fe:	8e 32       	cpi	r24, 0x2E	; 46
 500:	b9 f4       	brne	.+46     	; 0x530 <vfprintf+0xd6>
 502:	36 fc       	sbrc	r3, 6
 504:	81 c1       	rjmp	.+770    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 506:	23 2d       	mov	r18, r3
 508:	20 64       	ori	r18, 0x40	; 64
 50a:	32 2e       	mov	r3, r18
 50c:	19 c0       	rjmp	.+50     	; 0x540 <vfprintf+0xe6>
 50e:	36 fe       	sbrs	r3, 6
 510:	06 c0       	rjmp	.+12     	; 0x51e <vfprintf+0xc4>
 512:	8a e0       	ldi	r24, 0x0A	; 10
 514:	98 9e       	mul	r9, r24
 516:	20 0d       	add	r18, r0
 518:	11 24       	eor	r1, r1
 51a:	92 2e       	mov	r9, r18
 51c:	11 c0       	rjmp	.+34     	; 0x540 <vfprintf+0xe6>
 51e:	ea e0       	ldi	r30, 0x0A	; 10
 520:	2e 9e       	mul	r2, r30
 522:	20 0d       	add	r18, r0
 524:	11 24       	eor	r1, r1
 526:	22 2e       	mov	r2, r18
 528:	f3 2d       	mov	r31, r3
 52a:	f0 62       	ori	r31, 0x20	; 32
 52c:	3f 2e       	mov	r3, r31
 52e:	08 c0       	rjmp	.+16     	; 0x540 <vfprintf+0xe6>
 530:	8c 36       	cpi	r24, 0x6C	; 108
 532:	21 f4       	brne	.+8      	; 0x53c <vfprintf+0xe2>
 534:	83 2d       	mov	r24, r3
 536:	80 68       	ori	r24, 0x80	; 128
 538:	38 2e       	mov	r3, r24
 53a:	02 c0       	rjmp	.+4      	; 0x540 <vfprintf+0xe6>
 53c:	88 36       	cpi	r24, 0x68	; 104
 53e:	41 f4       	brne	.+16     	; 0x550 <vfprintf+0xf6>
 540:	f7 01       	movw	r30, r14
 542:	93 fd       	sbrc	r25, 3
 544:	85 91       	lpm	r24, Z+
 546:	93 ff       	sbrs	r25, 3
 548:	81 91       	ld	r24, Z+
 54a:	7f 01       	movw	r14, r30
 54c:	81 11       	cpse	r24, r1
 54e:	b3 cf       	rjmp	.-154    	; 0x4b6 <vfprintf+0x5c>
 550:	98 2f       	mov	r25, r24
 552:	9f 7d       	andi	r25, 0xDF	; 223
 554:	95 54       	subi	r25, 0x45	; 69
 556:	93 30       	cpi	r25, 0x03	; 3
 558:	28 f4       	brcc	.+10     	; 0x564 <vfprintf+0x10a>
 55a:	0c 5f       	subi	r16, 0xFC	; 252
 55c:	1f 4f       	sbci	r17, 0xFF	; 255
 55e:	9f e3       	ldi	r25, 0x3F	; 63
 560:	99 83       	std	Y+1, r25	; 0x01
 562:	0d c0       	rjmp	.+26     	; 0x57e <vfprintf+0x124>
 564:	83 36       	cpi	r24, 0x63	; 99
 566:	31 f0       	breq	.+12     	; 0x574 <vfprintf+0x11a>
 568:	83 37       	cpi	r24, 0x73	; 115
 56a:	71 f0       	breq	.+28     	; 0x588 <vfprintf+0x12e>
 56c:	83 35       	cpi	r24, 0x53	; 83
 56e:	09 f0       	breq	.+2      	; 0x572 <vfprintf+0x118>
 570:	59 c0       	rjmp	.+178    	; 0x624 <vfprintf+0x1ca>
 572:	21 c0       	rjmp	.+66     	; 0x5b6 <vfprintf+0x15c>
 574:	f8 01       	movw	r30, r16
 576:	80 81       	ld	r24, Z
 578:	89 83       	std	Y+1, r24	; 0x01
 57a:	0e 5f       	subi	r16, 0xFE	; 254
 57c:	1f 4f       	sbci	r17, 0xFF	; 255
 57e:	88 24       	eor	r8, r8
 580:	83 94       	inc	r8
 582:	91 2c       	mov	r9, r1
 584:	53 01       	movw	r10, r6
 586:	13 c0       	rjmp	.+38     	; 0x5ae <vfprintf+0x154>
 588:	28 01       	movw	r4, r16
 58a:	f2 e0       	ldi	r31, 0x02	; 2
 58c:	4f 0e       	add	r4, r31
 58e:	51 1c       	adc	r5, r1
 590:	f8 01       	movw	r30, r16
 592:	a0 80       	ld	r10, Z
 594:	b1 80       	ldd	r11, Z+1	; 0x01
 596:	36 fe       	sbrs	r3, 6
 598:	03 c0       	rjmp	.+6      	; 0x5a0 <vfprintf+0x146>
 59a:	69 2d       	mov	r22, r9
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <vfprintf+0x14a>
 5a0:	6f ef       	ldi	r22, 0xFF	; 255
 5a2:	7f ef       	ldi	r23, 0xFF	; 255
 5a4:	c5 01       	movw	r24, r10
 5a6:	0e 94 19 04 	call	0x832	; 0x832 <strnlen>
 5aa:	4c 01       	movw	r8, r24
 5ac:	82 01       	movw	r16, r4
 5ae:	f3 2d       	mov	r31, r3
 5b0:	ff 77       	andi	r31, 0x7F	; 127
 5b2:	3f 2e       	mov	r3, r31
 5b4:	16 c0       	rjmp	.+44     	; 0x5e2 <vfprintf+0x188>
 5b6:	28 01       	movw	r4, r16
 5b8:	22 e0       	ldi	r18, 0x02	; 2
 5ba:	42 0e       	add	r4, r18
 5bc:	51 1c       	adc	r5, r1
 5be:	f8 01       	movw	r30, r16
 5c0:	a0 80       	ld	r10, Z
 5c2:	b1 80       	ldd	r11, Z+1	; 0x01
 5c4:	36 fe       	sbrs	r3, 6
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <vfprintf+0x174>
 5c8:	69 2d       	mov	r22, r9
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <vfprintf+0x178>
 5ce:	6f ef       	ldi	r22, 0xFF	; 255
 5d0:	7f ef       	ldi	r23, 0xFF	; 255
 5d2:	c5 01       	movw	r24, r10
 5d4:	0e 94 0e 04 	call	0x81c	; 0x81c <strnlen_P>
 5d8:	4c 01       	movw	r8, r24
 5da:	f3 2d       	mov	r31, r3
 5dc:	f0 68       	ori	r31, 0x80	; 128
 5de:	3f 2e       	mov	r3, r31
 5e0:	82 01       	movw	r16, r4
 5e2:	33 fc       	sbrc	r3, 3
 5e4:	1b c0       	rjmp	.+54     	; 0x61c <vfprintf+0x1c2>
 5e6:	82 2d       	mov	r24, r2
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	88 16       	cp	r8, r24
 5ec:	99 06       	cpc	r9, r25
 5ee:	b0 f4       	brcc	.+44     	; 0x61c <vfprintf+0x1c2>
 5f0:	b6 01       	movw	r22, r12
 5f2:	80 e2       	ldi	r24, 0x20	; 32
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
 5fa:	2a 94       	dec	r2
 5fc:	f4 cf       	rjmp	.-24     	; 0x5e6 <vfprintf+0x18c>
 5fe:	f5 01       	movw	r30, r10
 600:	37 fc       	sbrc	r3, 7
 602:	85 91       	lpm	r24, Z+
 604:	37 fe       	sbrs	r3, 7
 606:	81 91       	ld	r24, Z+
 608:	5f 01       	movw	r10, r30
 60a:	b6 01       	movw	r22, r12
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
 612:	21 10       	cpse	r2, r1
 614:	2a 94       	dec	r2
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	82 1a       	sub	r8, r18
 61a:	91 08       	sbc	r9, r1
 61c:	81 14       	cp	r8, r1
 61e:	91 04       	cpc	r9, r1
 620:	71 f7       	brne	.-36     	; 0x5fe <vfprintf+0x1a4>
 622:	e8 c0       	rjmp	.+464    	; 0x7f4 <vfprintf+0x39a>
 624:	84 36       	cpi	r24, 0x64	; 100
 626:	11 f0       	breq	.+4      	; 0x62c <vfprintf+0x1d2>
 628:	89 36       	cpi	r24, 0x69	; 105
 62a:	41 f5       	brne	.+80     	; 0x67c <vfprintf+0x222>
 62c:	f8 01       	movw	r30, r16
 62e:	37 fe       	sbrs	r3, 7
 630:	07 c0       	rjmp	.+14     	; 0x640 <vfprintf+0x1e6>
 632:	60 81       	ld	r22, Z
 634:	71 81       	ldd	r23, Z+1	; 0x01
 636:	82 81       	ldd	r24, Z+2	; 0x02
 638:	93 81       	ldd	r25, Z+3	; 0x03
 63a:	0c 5f       	subi	r16, 0xFC	; 252
 63c:	1f 4f       	sbci	r17, 0xFF	; 255
 63e:	08 c0       	rjmp	.+16     	; 0x650 <vfprintf+0x1f6>
 640:	60 81       	ld	r22, Z
 642:	71 81       	ldd	r23, Z+1	; 0x01
 644:	07 2e       	mov	r0, r23
 646:	00 0c       	add	r0, r0
 648:	88 0b       	sbc	r24, r24
 64a:	99 0b       	sbc	r25, r25
 64c:	0e 5f       	subi	r16, 0xFE	; 254
 64e:	1f 4f       	sbci	r17, 0xFF	; 255
 650:	f3 2d       	mov	r31, r3
 652:	ff 76       	andi	r31, 0x6F	; 111
 654:	3f 2e       	mov	r3, r31
 656:	97 ff       	sbrs	r25, 7
 658:	09 c0       	rjmp	.+18     	; 0x66c <vfprintf+0x212>
 65a:	90 95       	com	r25
 65c:	80 95       	com	r24
 65e:	70 95       	com	r23
 660:	61 95       	neg	r22
 662:	7f 4f       	sbci	r23, 0xFF	; 255
 664:	8f 4f       	sbci	r24, 0xFF	; 255
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	f0 68       	ori	r31, 0x80	; 128
 66a:	3f 2e       	mov	r3, r31
 66c:	2a e0       	ldi	r18, 0x0A	; 10
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	a3 01       	movw	r20, r6
 672:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__ultoa_invert>
 676:	88 2e       	mov	r8, r24
 678:	86 18       	sub	r8, r6
 67a:	45 c0       	rjmp	.+138    	; 0x706 <vfprintf+0x2ac>
 67c:	85 37       	cpi	r24, 0x75	; 117
 67e:	31 f4       	brne	.+12     	; 0x68c <vfprintf+0x232>
 680:	23 2d       	mov	r18, r3
 682:	2f 7e       	andi	r18, 0xEF	; 239
 684:	b2 2e       	mov	r11, r18
 686:	2a e0       	ldi	r18, 0x0A	; 10
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	25 c0       	rjmp	.+74     	; 0x6d6 <vfprintf+0x27c>
 68c:	93 2d       	mov	r25, r3
 68e:	99 7f       	andi	r25, 0xF9	; 249
 690:	b9 2e       	mov	r11, r25
 692:	8f 36       	cpi	r24, 0x6F	; 111
 694:	c1 f0       	breq	.+48     	; 0x6c6 <vfprintf+0x26c>
 696:	18 f4       	brcc	.+6      	; 0x69e <vfprintf+0x244>
 698:	88 35       	cpi	r24, 0x58	; 88
 69a:	79 f0       	breq	.+30     	; 0x6ba <vfprintf+0x260>
 69c:	b5 c0       	rjmp	.+362    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 69e:	80 37       	cpi	r24, 0x70	; 112
 6a0:	19 f0       	breq	.+6      	; 0x6a8 <vfprintf+0x24e>
 6a2:	88 37       	cpi	r24, 0x78	; 120
 6a4:	21 f0       	breq	.+8      	; 0x6ae <vfprintf+0x254>
 6a6:	b0 c0       	rjmp	.+352    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 6a8:	e9 2f       	mov	r30, r25
 6aa:	e0 61       	ori	r30, 0x10	; 16
 6ac:	be 2e       	mov	r11, r30
 6ae:	b4 fe       	sbrs	r11, 4
 6b0:	0d c0       	rjmp	.+26     	; 0x6cc <vfprintf+0x272>
 6b2:	fb 2d       	mov	r31, r11
 6b4:	f4 60       	ori	r31, 0x04	; 4
 6b6:	bf 2e       	mov	r11, r31
 6b8:	09 c0       	rjmp	.+18     	; 0x6cc <vfprintf+0x272>
 6ba:	34 fe       	sbrs	r3, 4
 6bc:	0a c0       	rjmp	.+20     	; 0x6d2 <vfprintf+0x278>
 6be:	29 2f       	mov	r18, r25
 6c0:	26 60       	ori	r18, 0x06	; 6
 6c2:	b2 2e       	mov	r11, r18
 6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <vfprintf+0x278>
 6c6:	28 e0       	ldi	r18, 0x08	; 8
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <vfprintf+0x27c>
 6cc:	20 e1       	ldi	r18, 0x10	; 16
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <vfprintf+0x27c>
 6d2:	20 e1       	ldi	r18, 0x10	; 16
 6d4:	32 e0       	ldi	r19, 0x02	; 2
 6d6:	f8 01       	movw	r30, r16
 6d8:	b7 fe       	sbrs	r11, 7
 6da:	07 c0       	rjmp	.+14     	; 0x6ea <vfprintf+0x290>
 6dc:	60 81       	ld	r22, Z
 6de:	71 81       	ldd	r23, Z+1	; 0x01
 6e0:	82 81       	ldd	r24, Z+2	; 0x02
 6e2:	93 81       	ldd	r25, Z+3	; 0x03
 6e4:	0c 5f       	subi	r16, 0xFC	; 252
 6e6:	1f 4f       	sbci	r17, 0xFF	; 255
 6e8:	06 c0       	rjmp	.+12     	; 0x6f6 <vfprintf+0x29c>
 6ea:	60 81       	ld	r22, Z
 6ec:	71 81       	ldd	r23, Z+1	; 0x01
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 5f       	subi	r16, 0xFE	; 254
 6f4:	1f 4f       	sbci	r17, 0xFF	; 255
 6f6:	a3 01       	movw	r20, r6
 6f8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__ultoa_invert>
 6fc:	88 2e       	mov	r8, r24
 6fe:	86 18       	sub	r8, r6
 700:	fb 2d       	mov	r31, r11
 702:	ff 77       	andi	r31, 0x7F	; 127
 704:	3f 2e       	mov	r3, r31
 706:	36 fe       	sbrs	r3, 6
 708:	0d c0       	rjmp	.+26     	; 0x724 <vfprintf+0x2ca>
 70a:	23 2d       	mov	r18, r3
 70c:	2e 7f       	andi	r18, 0xFE	; 254
 70e:	a2 2e       	mov	r10, r18
 710:	89 14       	cp	r8, r9
 712:	58 f4       	brcc	.+22     	; 0x72a <vfprintf+0x2d0>
 714:	34 fe       	sbrs	r3, 4
 716:	0b c0       	rjmp	.+22     	; 0x72e <vfprintf+0x2d4>
 718:	32 fc       	sbrc	r3, 2
 71a:	09 c0       	rjmp	.+18     	; 0x72e <vfprintf+0x2d4>
 71c:	83 2d       	mov	r24, r3
 71e:	8e 7e       	andi	r24, 0xEE	; 238
 720:	a8 2e       	mov	r10, r24
 722:	05 c0       	rjmp	.+10     	; 0x72e <vfprintf+0x2d4>
 724:	b8 2c       	mov	r11, r8
 726:	a3 2c       	mov	r10, r3
 728:	03 c0       	rjmp	.+6      	; 0x730 <vfprintf+0x2d6>
 72a:	b8 2c       	mov	r11, r8
 72c:	01 c0       	rjmp	.+2      	; 0x730 <vfprintf+0x2d6>
 72e:	b9 2c       	mov	r11, r9
 730:	a4 fe       	sbrs	r10, 4
 732:	0f c0       	rjmp	.+30     	; 0x752 <vfprintf+0x2f8>
 734:	fe 01       	movw	r30, r28
 736:	e8 0d       	add	r30, r8
 738:	f1 1d       	adc	r31, r1
 73a:	80 81       	ld	r24, Z
 73c:	80 33       	cpi	r24, 0x30	; 48
 73e:	21 f4       	brne	.+8      	; 0x748 <vfprintf+0x2ee>
 740:	9a 2d       	mov	r25, r10
 742:	99 7e       	andi	r25, 0xE9	; 233
 744:	a9 2e       	mov	r10, r25
 746:	09 c0       	rjmp	.+18     	; 0x75a <vfprintf+0x300>
 748:	a2 fe       	sbrs	r10, 2
 74a:	06 c0       	rjmp	.+12     	; 0x758 <vfprintf+0x2fe>
 74c:	b3 94       	inc	r11
 74e:	b3 94       	inc	r11
 750:	04 c0       	rjmp	.+8      	; 0x75a <vfprintf+0x300>
 752:	8a 2d       	mov	r24, r10
 754:	86 78       	andi	r24, 0x86	; 134
 756:	09 f0       	breq	.+2      	; 0x75a <vfprintf+0x300>
 758:	b3 94       	inc	r11
 75a:	a3 fc       	sbrc	r10, 3
 75c:	11 c0       	rjmp	.+34     	; 0x780 <vfprintf+0x326>
 75e:	a0 fe       	sbrs	r10, 0
 760:	06 c0       	rjmp	.+12     	; 0x76e <vfprintf+0x314>
 762:	b2 14       	cp	r11, r2
 764:	88 f4       	brcc	.+34     	; 0x788 <vfprintf+0x32e>
 766:	28 0c       	add	r2, r8
 768:	92 2c       	mov	r9, r2
 76a:	9b 18       	sub	r9, r11
 76c:	0e c0       	rjmp	.+28     	; 0x78a <vfprintf+0x330>
 76e:	b2 14       	cp	r11, r2
 770:	60 f4       	brcc	.+24     	; 0x78a <vfprintf+0x330>
 772:	b6 01       	movw	r22, r12
 774:	80 e2       	ldi	r24, 0x20	; 32
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
 77c:	b3 94       	inc	r11
 77e:	f7 cf       	rjmp	.-18     	; 0x76e <vfprintf+0x314>
 780:	b2 14       	cp	r11, r2
 782:	18 f4       	brcc	.+6      	; 0x78a <vfprintf+0x330>
 784:	2b 18       	sub	r2, r11
 786:	02 c0       	rjmp	.+4      	; 0x78c <vfprintf+0x332>
 788:	98 2c       	mov	r9, r8
 78a:	21 2c       	mov	r2, r1
 78c:	a4 fe       	sbrs	r10, 4
 78e:	10 c0       	rjmp	.+32     	; 0x7b0 <vfprintf+0x356>
 790:	b6 01       	movw	r22, r12
 792:	80 e3       	ldi	r24, 0x30	; 48
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
 79a:	a2 fe       	sbrs	r10, 2
 79c:	17 c0       	rjmp	.+46     	; 0x7cc <vfprintf+0x372>
 79e:	a1 fc       	sbrc	r10, 1
 7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <vfprintf+0x34e>
 7a2:	88 e7       	ldi	r24, 0x78	; 120
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <vfprintf+0x352>
 7a8:	88 e5       	ldi	r24, 0x58	; 88
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	b6 01       	movw	r22, r12
 7ae:	0c c0       	rjmp	.+24     	; 0x7c8 <vfprintf+0x36e>
 7b0:	8a 2d       	mov	r24, r10
 7b2:	86 78       	andi	r24, 0x86	; 134
 7b4:	59 f0       	breq	.+22     	; 0x7cc <vfprintf+0x372>
 7b6:	a1 fe       	sbrs	r10, 1
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <vfprintf+0x364>
 7ba:	8b e2       	ldi	r24, 0x2B	; 43
 7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <vfprintf+0x366>
 7be:	80 e2       	ldi	r24, 0x20	; 32
 7c0:	a7 fc       	sbrc	r10, 7
 7c2:	8d e2       	ldi	r24, 0x2D	; 45
 7c4:	b6 01       	movw	r22, r12
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
 7cc:	89 14       	cp	r8, r9
 7ce:	38 f4       	brcc	.+14     	; 0x7de <vfprintf+0x384>
 7d0:	b6 01       	movw	r22, r12
 7d2:	80 e3       	ldi	r24, 0x30	; 48
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
 7da:	9a 94       	dec	r9
 7dc:	f7 cf       	rjmp	.-18     	; 0x7cc <vfprintf+0x372>
 7de:	8a 94       	dec	r8
 7e0:	f3 01       	movw	r30, r6
 7e2:	e8 0d       	add	r30, r8
 7e4:	f1 1d       	adc	r31, r1
 7e6:	80 81       	ld	r24, Z
 7e8:	b6 01       	movw	r22, r12
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
 7f0:	81 10       	cpse	r8, r1
 7f2:	f5 cf       	rjmp	.-22     	; 0x7de <vfprintf+0x384>
 7f4:	22 20       	and	r2, r2
 7f6:	09 f4       	brne	.+2      	; 0x7fa <vfprintf+0x3a0>
 7f8:	42 ce       	rjmp	.-892    	; 0x47e <vfprintf+0x24>
 7fa:	b6 01       	movw	r22, r12
 7fc:	80 e2       	ldi	r24, 0x20	; 32
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 24 04 	call	0x848	; 0x848 <fputc>
 804:	2a 94       	dec	r2
 806:	f6 cf       	rjmp	.-20     	; 0x7f4 <vfprintf+0x39a>
 808:	f6 01       	movw	r30, r12
 80a:	86 81       	ldd	r24, Z+6	; 0x06
 80c:	97 81       	ldd	r25, Z+7	; 0x07
 80e:	02 c0       	rjmp	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 810:	8f ef       	ldi	r24, 0xFF	; 255
 812:	9f ef       	ldi	r25, 0xFF	; 255
 814:	2b 96       	adiw	r28, 0x0b	; 11
 816:	e2 e1       	ldi	r30, 0x12	; 18
 818:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__epilogue_restores__>

0000081c <strnlen_P>:
 81c:	fc 01       	movw	r30, r24
 81e:	05 90       	lpm	r0, Z+
 820:	61 50       	subi	r22, 0x01	; 1
 822:	70 40       	sbci	r23, 0x00	; 0
 824:	01 10       	cpse	r0, r1
 826:	d8 f7       	brcc	.-10     	; 0x81e <strnlen_P+0x2>
 828:	80 95       	com	r24
 82a:	90 95       	com	r25
 82c:	8e 0f       	add	r24, r30
 82e:	9f 1f       	adc	r25, r31
 830:	08 95       	ret

00000832 <strnlen>:
 832:	fc 01       	movw	r30, r24
 834:	61 50       	subi	r22, 0x01	; 1
 836:	70 40       	sbci	r23, 0x00	; 0
 838:	01 90       	ld	r0, Z+
 83a:	01 10       	cpse	r0, r1
 83c:	d8 f7       	brcc	.-10     	; 0x834 <strnlen+0x2>
 83e:	80 95       	com	r24
 840:	90 95       	com	r25
 842:	8e 0f       	add	r24, r30
 844:	9f 1f       	adc	r25, r31
 846:	08 95       	ret

00000848 <fputc>:
 848:	0f 93       	push	r16
 84a:	1f 93       	push	r17
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	fb 01       	movw	r30, r22
 852:	23 81       	ldd	r18, Z+3	; 0x03
 854:	21 fd       	sbrc	r18, 1
 856:	03 c0       	rjmp	.+6      	; 0x85e <fputc+0x16>
 858:	8f ef       	ldi	r24, 0xFF	; 255
 85a:	9f ef       	ldi	r25, 0xFF	; 255
 85c:	2c c0       	rjmp	.+88     	; 0x8b6 <fputc+0x6e>
 85e:	22 ff       	sbrs	r18, 2
 860:	16 c0       	rjmp	.+44     	; 0x88e <fputc+0x46>
 862:	46 81       	ldd	r20, Z+6	; 0x06
 864:	57 81       	ldd	r21, Z+7	; 0x07
 866:	24 81       	ldd	r18, Z+4	; 0x04
 868:	35 81       	ldd	r19, Z+5	; 0x05
 86a:	42 17       	cp	r20, r18
 86c:	53 07       	cpc	r21, r19
 86e:	44 f4       	brge	.+16     	; 0x880 <fputc+0x38>
 870:	a0 81       	ld	r26, Z
 872:	b1 81       	ldd	r27, Z+1	; 0x01
 874:	9d 01       	movw	r18, r26
 876:	2f 5f       	subi	r18, 0xFF	; 255
 878:	3f 4f       	sbci	r19, 0xFF	; 255
 87a:	31 83       	std	Z+1, r19	; 0x01
 87c:	20 83       	st	Z, r18
 87e:	8c 93       	st	X, r24
 880:	26 81       	ldd	r18, Z+6	; 0x06
 882:	37 81       	ldd	r19, Z+7	; 0x07
 884:	2f 5f       	subi	r18, 0xFF	; 255
 886:	3f 4f       	sbci	r19, 0xFF	; 255
 888:	37 83       	std	Z+7, r19	; 0x07
 88a:	26 83       	std	Z+6, r18	; 0x06
 88c:	14 c0       	rjmp	.+40     	; 0x8b6 <fputc+0x6e>
 88e:	8b 01       	movw	r16, r22
 890:	ec 01       	movw	r28, r24
 892:	fb 01       	movw	r30, r22
 894:	00 84       	ldd	r0, Z+8	; 0x08
 896:	f1 85       	ldd	r31, Z+9	; 0x09
 898:	e0 2d       	mov	r30, r0
 89a:	09 95       	icall
 89c:	89 2b       	or	r24, r25
 89e:	e1 f6       	brne	.-72     	; 0x858 <fputc+0x10>
 8a0:	d8 01       	movw	r26, r16
 8a2:	16 96       	adiw	r26, 0x06	; 6
 8a4:	8d 91       	ld	r24, X+
 8a6:	9c 91       	ld	r25, X
 8a8:	17 97       	sbiw	r26, 0x07	; 7
 8aa:	01 96       	adiw	r24, 0x01	; 1
 8ac:	17 96       	adiw	r26, 0x07	; 7
 8ae:	9c 93       	st	X, r25
 8b0:	8e 93       	st	-X, r24
 8b2:	16 97       	sbiw	r26, 0x06	; 6
 8b4:	ce 01       	movw	r24, r28
 8b6:	df 91       	pop	r29
 8b8:	cf 91       	pop	r28
 8ba:	1f 91       	pop	r17
 8bc:	0f 91       	pop	r16
 8be:	08 95       	ret

000008c0 <__ultoa_invert>:
 8c0:	fa 01       	movw	r30, r20
 8c2:	aa 27       	eor	r26, r26
 8c4:	28 30       	cpi	r18, 0x08	; 8
 8c6:	51 f1       	breq	.+84     	; 0x91c <__stack+0x1d>
 8c8:	20 31       	cpi	r18, 0x10	; 16
 8ca:	81 f1       	breq	.+96     	; 0x92c <__stack+0x2d>
 8cc:	e8 94       	clt
 8ce:	6f 93       	push	r22
 8d0:	6e 7f       	andi	r22, 0xFE	; 254
 8d2:	6e 5f       	subi	r22, 0xFE	; 254
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255
 8d6:	8f 4f       	sbci	r24, 0xFF	; 255
 8d8:	9f 4f       	sbci	r25, 0xFF	; 255
 8da:	af 4f       	sbci	r26, 0xFF	; 255
 8dc:	b1 e0       	ldi	r27, 0x01	; 1
 8de:	3e d0       	rcall	.+124    	; 0x95c <__stack+0x5d>
 8e0:	b4 e0       	ldi	r27, 0x04	; 4
 8e2:	3c d0       	rcall	.+120    	; 0x95c <__stack+0x5d>
 8e4:	67 0f       	add	r22, r23
 8e6:	78 1f       	adc	r23, r24
 8e8:	89 1f       	adc	r24, r25
 8ea:	9a 1f       	adc	r25, r26
 8ec:	a1 1d       	adc	r26, r1
 8ee:	68 0f       	add	r22, r24
 8f0:	79 1f       	adc	r23, r25
 8f2:	8a 1f       	adc	r24, r26
 8f4:	91 1d       	adc	r25, r1
 8f6:	a1 1d       	adc	r26, r1
 8f8:	6a 0f       	add	r22, r26
 8fa:	71 1d       	adc	r23, r1
 8fc:	81 1d       	adc	r24, r1
 8fe:	91 1d       	adc	r25, r1
 900:	a1 1d       	adc	r26, r1
 902:	20 d0       	rcall	.+64     	; 0x944 <__stack+0x45>
 904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
 906:	68 94       	set
 908:	3f 91       	pop	r19
 90a:	2a e0       	ldi	r18, 0x0A	; 10
 90c:	26 9f       	mul	r18, r22
 90e:	11 24       	eor	r1, r1
 910:	30 19       	sub	r19, r0
 912:	30 5d       	subi	r19, 0xD0	; 208
 914:	31 93       	st	Z+, r19
 916:	de f6       	brtc	.-74     	; 0x8ce <__ultoa_invert+0xe>
 918:	cf 01       	movw	r24, r30
 91a:	08 95       	ret
 91c:	46 2f       	mov	r20, r22
 91e:	47 70       	andi	r20, 0x07	; 7
 920:	40 5d       	subi	r20, 0xD0	; 208
 922:	41 93       	st	Z+, r20
 924:	b3 e0       	ldi	r27, 0x03	; 3
 926:	0f d0       	rcall	.+30     	; 0x946 <__stack+0x47>
 928:	c9 f7       	brne	.-14     	; 0x91c <__stack+0x1d>
 92a:	f6 cf       	rjmp	.-20     	; 0x918 <__stack+0x19>
 92c:	46 2f       	mov	r20, r22
 92e:	4f 70       	andi	r20, 0x0F	; 15
 930:	40 5d       	subi	r20, 0xD0	; 208
 932:	4a 33       	cpi	r20, 0x3A	; 58
 934:	18 f0       	brcs	.+6      	; 0x93c <__stack+0x3d>
 936:	49 5d       	subi	r20, 0xD9	; 217
 938:	31 fd       	sbrc	r19, 1
 93a:	40 52       	subi	r20, 0x20	; 32
 93c:	41 93       	st	Z+, r20
 93e:	02 d0       	rcall	.+4      	; 0x944 <__stack+0x45>
 940:	a9 f7       	brne	.-22     	; 0x92c <__stack+0x2d>
 942:	ea cf       	rjmp	.-44     	; 0x918 <__stack+0x19>
 944:	b4 e0       	ldi	r27, 0x04	; 4
 946:	a6 95       	lsr	r26
 948:	97 95       	ror	r25
 94a:	87 95       	ror	r24
 94c:	77 95       	ror	r23
 94e:	67 95       	ror	r22
 950:	ba 95       	dec	r27
 952:	c9 f7       	brne	.-14     	; 0x946 <__stack+0x47>
 954:	00 97       	sbiw	r24, 0x00	; 0
 956:	61 05       	cpc	r22, r1
 958:	71 05       	cpc	r23, r1
 95a:	08 95       	ret
 95c:	9b 01       	movw	r18, r22
 95e:	ac 01       	movw	r20, r24
 960:	0a 2e       	mov	r0, r26
 962:	06 94       	lsr	r0
 964:	57 95       	ror	r21
 966:	47 95       	ror	r20
 968:	37 95       	ror	r19
 96a:	27 95       	ror	r18
 96c:	ba 95       	dec	r27
 96e:	c9 f7       	brne	.-14     	; 0x962 <__stack+0x63>
 970:	62 0f       	add	r22, r18
 972:	73 1f       	adc	r23, r19
 974:	84 1f       	adc	r24, r20
 976:	95 1f       	adc	r25, r21
 978:	a0 1d       	adc	r26, r0
 97a:	08 95       	ret

0000097c <__prologue_saves__>:
 97c:	2f 92       	push	r2
 97e:	3f 92       	push	r3
 980:	4f 92       	push	r4
 982:	5f 92       	push	r5
 984:	6f 92       	push	r6
 986:	7f 92       	push	r7
 988:	8f 92       	push	r8
 98a:	9f 92       	push	r9
 98c:	af 92       	push	r10
 98e:	bf 92       	push	r11
 990:	cf 92       	push	r12
 992:	df 92       	push	r13
 994:	ef 92       	push	r14
 996:	ff 92       	push	r15
 998:	0f 93       	push	r16
 99a:	1f 93       	push	r17
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
 9a0:	cd b7       	in	r28, 0x3d	; 61
 9a2:	de b7       	in	r29, 0x3e	; 62
 9a4:	ca 1b       	sub	r28, r26
 9a6:	db 0b       	sbc	r29, r27
 9a8:	0f b6       	in	r0, 0x3f	; 63
 9aa:	f8 94       	cli
 9ac:	de bf       	out	0x3e, r29	; 62
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	cd bf       	out	0x3d, r28	; 61
 9b2:	09 94       	ijmp

000009b4 <__epilogue_restores__>:
 9b4:	2a 88       	ldd	r2, Y+18	; 0x12
 9b6:	39 88       	ldd	r3, Y+17	; 0x11
 9b8:	48 88       	ldd	r4, Y+16	; 0x10
 9ba:	5f 84       	ldd	r5, Y+15	; 0x0f
 9bc:	6e 84       	ldd	r6, Y+14	; 0x0e
 9be:	7d 84       	ldd	r7, Y+13	; 0x0d
 9c0:	8c 84       	ldd	r8, Y+12	; 0x0c
 9c2:	9b 84       	ldd	r9, Y+11	; 0x0b
 9c4:	aa 84       	ldd	r10, Y+10	; 0x0a
 9c6:	b9 84       	ldd	r11, Y+9	; 0x09
 9c8:	c8 84       	ldd	r12, Y+8	; 0x08
 9ca:	df 80       	ldd	r13, Y+7	; 0x07
 9cc:	ee 80       	ldd	r14, Y+6	; 0x06
 9ce:	fd 80       	ldd	r15, Y+5	; 0x05
 9d0:	0c 81       	ldd	r16, Y+4	; 0x04
 9d2:	1b 81       	ldd	r17, Y+3	; 0x03
 9d4:	aa 81       	ldd	r26, Y+2	; 0x02
 9d6:	b9 81       	ldd	r27, Y+1	; 0x01
 9d8:	ce 0f       	add	r28, r30
 9da:	d1 1d       	adc	r29, r1
 9dc:	0f b6       	in	r0, 0x3f	; 63
 9de:	f8 94       	cli
 9e0:	de bf       	out	0x3e, r29	; 62
 9e2:	0f be       	out	0x3f, r0	; 63
 9e4:	cd bf       	out	0x3d, r28	; 61
 9e6:	ed 01       	movw	r28, r26
 9e8:	08 95       	ret

000009ea <_exit>:
 9ea:	f8 94       	cli

000009ec <__stop_program>:
 9ec:	ff cf       	rjmp	.-2      	; 0x9ec <__stop_program>
