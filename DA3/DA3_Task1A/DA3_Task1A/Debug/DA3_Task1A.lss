
DA3_Task1A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000982  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d3  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000289  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046b  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00001b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
#define DELAY_TCNT_VALUE 20		//TCNT = ((16 MHz / 256)*(1/3000)) - 1 = 19.83. Rounding up to 20. Results in a delay of 0.320 ms
#define DELAY_COUNTER 3125		// Timer delay is 0.320 ms. 1 second / 0.320 ms = 3125

int main(void)
{
	DDRB |= (1<<4);			//Set PB4 to an output
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<4);		// Turn LED off initially
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	85 b9       	out	0x05, r24	; 5
	TCCR0A = 0;				// Set timer to Normal mode
  d8:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02);	// set prescalar to 256
  da:	85 b5       	in	r24, 0x25	; 37
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0x00;			//Initialize the TCNT register to start the timer
  e0:	16 bc       	out	0x26, r1	; 38
    
	int overflows = 0;		//Counter to track the how many times the timer overflows
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
	while (1) 
    {
		if (TCNT0 == DELAY_TCNT_VALUE) {	
  e6:	86 b5       	in	r24, 0x26	; 38
  e8:	84 31       	cpi	r24, 0x14	; 20
  ea:	e9 f7       	brne	.-6      	; 0xe6 <main+0x1a>
			overflows++;	//If the TCNT has overflown, increment the counter
  ec:	2f 5f       	subi	r18, 0xFF	; 255
  ee:	3f 4f       	sbci	r19, 0xFF	; 255
			if (overflows >= DELAY_COUNTER) {	//If the timer has overflown enough times, reset the counter and toggle the LED
  f0:	25 33       	cpi	r18, 0x35	; 53
  f2:	8c e0       	ldi	r24, 0x0C	; 12
  f4:	38 07       	cpc	r19, r24
  f6:	34 f0       	brlt	.+12     	; 0x104 <main+0x38>
				overflows = 0;		
				PORTB ^= (1<<4);
  f8:	95 b1       	in	r25, 0x05	; 5
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	89 27       	eor	r24, r25
  fe:	85 b9       	out	0x05, r24	; 5
	while (1) 
    {
		if (TCNT0 == DELAY_TCNT_VALUE) {	
			overflows++;	//If the TCNT has overflown, increment the counter
			if (overflows >= DELAY_COUNTER) {	//If the timer has overflown enough times, reset the counter and toggle the LED
				overflows = 0;		
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
				PORTB ^= (1<<4);
			}
			TCNT0 = 0;			//Reset the TCNT register
 104:	16 bc       	out	0x26, r1	; 38
 106:	ef cf       	rjmp	.-34     	; 0xe6 <main+0x1a>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
