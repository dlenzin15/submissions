
DA4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a4  00800100  000009cc  00000a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008003a4  008003a4  00000d04  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dac  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4e  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000513  00000000  00000000  00002612  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00002b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000575  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000277  00000000  00000000  000031e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000345c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_14>
  3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  48:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_18>
  4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  8c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  90:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  94:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  98:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  9c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  a0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  a4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  a8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  ac:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  b0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  b4:	8b 01       	movw	r16, r22
  b6:	90 01       	movw	r18, r0
  b8:	90 01       	movw	r18, r0
  ba:	90 01       	movw	r18, r0
  bc:	90 01       	movw	r18, r0
  be:	90 01       	movw	r18, r0
  c0:	90 01       	movw	r18, r0
  c2:	90 01       	movw	r18, r0
  c4:	90 01       	movw	r18, r0
  c6:	90 01       	movw	r18, r0
  c8:	90 01       	movw	r18, r0
  ca:	90 01       	movw	r18, r0
  cc:	90 01       	movw	r18, r0
  ce:	90 01       	movw	r18, r0
  d0:	67 01       	movw	r12, r14
  d2:	79 01       	movw	r14, r18
  d4:	90 01       	movw	r18, r0
  d6:	90 01       	movw	r18, r0
  d8:	90 01       	movw	r18, r0
  da:	90 01       	movw	r18, r0
  dc:	90 01       	movw	r18, r0
  de:	90 01       	movw	r18, r0
  e0:	90 01       	movw	r18, r0
  e2:	90 01       	movw	r18, r0
  e4:	90 01       	movw	r18, r0
  e6:	90 01       	movw	r18, r0
  e8:	90 01       	movw	r18, r0
  ea:	90 01       	movw	r18, r0
  ec:	90 01       	movw	r18, r0
  ee:	90 01       	movw	r18, r0
  f0:	90 01       	movw	r18, r0
  f2:	90 01       	movw	r18, r0
  f4:	85 01       	movw	r16, r10
  f6:	6e 01       	movw	r12, r28
  f8:	90 01       	movw	r18, r0
  fa:	90 01       	movw	r18, r0
  fc:	90 01       	movw	r18, r0
  fe:	90 01       	movw	r18, r0
 100:	90 01       	movw	r18, r0
 102:	59 01       	movw	r10, r18
 104:	90 01       	movw	r18, r0
 106:	90 01       	movw	r18, r0
 108:	90 01       	movw	r18, r0
 10a:	90 01       	movw	r18, r0
 10c:	90 01       	movw	r18, r0
 10e:	90 01       	movw	r18, r0
 110:	60 01       	movw	r12, r0

00000112 <__ctors_end>:
 112:	11 24       	eor	r1, r1
 114:	1f be       	out	0x3f, r1	; 63
 116:	cf ef       	ldi	r28, 0xFF	; 255
 118:	d8 e0       	ldi	r29, 0x08	; 8
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
 11e:	13 e0       	ldi	r17, 0x03	; 3
 120:	a0 e0       	ldi	r26, 0x00	; 0
 122:	b1 e0       	ldi	r27, 0x01	; 1
 124:	ec ec       	ldi	r30, 0xCC	; 204
 126:	f9 e0       	ldi	r31, 0x09	; 9
 128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x10>
 12a:	05 90       	lpm	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	a4 3a       	cpi	r26, 0xA4	; 164
 130:	b1 07       	cpc	r27, r17
 132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0xc>

00000134 <__do_clear_bss>:
 134:	23 e0       	ldi	r18, 0x03	; 3
 136:	a4 ea       	ldi	r26, 0xA4	; 164
 138:	b3 e0       	ldi	r27, 0x03	; 3
 13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
 13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
 13e:	aa 3a       	cpi	r26, 0xAA	; 170
 140:	b2 07       	cpc	r27, r18
 142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
 144:	0e 94 af 01 	call	0x35e	; 0x35e <main>
 148:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <_exit>

0000014c <__bad_interrupt>:
 14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <UART_init>:
void read_adc(void);

void UART_init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 150:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 154:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Enable transmitter and receiver and reciever interrupt
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
 158:	88 e9       	ldi	r24, 0x98	; 152
 15a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	 
	//Set frame format: 8 bits data, 1 stop bit
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);	
 15e:	e2 ec       	ldi	r30, 0xC2	; 194
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	86 60       	ori	r24, 0x06	; 6
 166:	80 83       	st	Z, r24
	
	sei();
 168:	78 94       	sei
 16a:	08 95       	ret

0000016c <timer_init>:
}

void timer_init(void)
{
	TCCR0A |= (1<<WGM01);				//Set Timer1 to CTC mode
 16c:	84 b5       	in	r24, 0x24	; 36
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) | (1<<CS00);	//Set prescaler to 1024
 172:	85 b5       	in	r24, 0x25	; 37
 174:	83 60       	ori	r24, 0x03	; 3
 176:	85 bd       	out	0x25, r24	; 37
	OCR0A = OCR0A_VALUE;				//Load compare register value
 178:	8c e7       	ldi	r24, 0x7C	; 124
 17a:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);			//Set interrupt on compare match
 17c:	ee e6       	ldi	r30, 0x6E	; 110
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	82 60       	ori	r24, 0x02	; 2
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

00000188 <led_init>:
}

void led_init(void)
{
	DDRB |= (1<<3) | (1<<5);	//Set PB5 and PB3 to outputs for LED
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	88 62       	ori	r24, 0x28	; 40
 18c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<3) | (1<<5);	//Turn off LEDs initially
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	88 62       	ori	r24, 0x28	; 40
 192:	85 b9       	out	0x05, r24	; 5
 194:	08 95       	ret

00000196 <adc_init>:
}

void adc_init(void)
{
	// Use AVcc with external capacitor. Right adjusted result. ADC0 selected for PC0
	ADMUX = (0<<REFS1) | (1<<REFS0) | (0<<ADLAR) | (0<<MUX2) | (0<<MUX1) | (0<<MUX0);
 196:	80 e4       	ldi	r24, 0x40	; 64
 198:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// Set the prescaler to 32. Don't enable the ADC until it is needed
	ADCSRA = (0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
 19c:	85 e0       	ldi	r24, 0x05	; 5
 19e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1a2:	08 95       	ret

000001a4 <turn_on_led>:
}

void turn_on_led(void)
{
	PORTB &= ~(1<<5); //Turn on PB5 LED
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	8f 7d       	andi	r24, 0xDF	; 223
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	08 95       	ret

000001ac <turn_off_led>:
}

void turn_off_led(void)
{
	PORTB |= (1<<5); //Turn off PB5 LED
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	85 b9       	out	0x05, r24	; 5
 1b2:	08 95       	ret

000001b4 <__vector_14>:
			break;
	}
}

ISR(TIMER0_COMPA_vect) 
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
	static int overflows = 0;	// Variable to track timer overflows
	if (blink_enable == 1){		// Check if blink has been enabled
 1c4:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <blink_enable>
 1c8:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <blink_enable+0x1>
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	a1 f4       	brne	.+40     	; 0x1f8 <__vector_14+0x44>
		overflows++;			// Increment overflows until we reach the value that gives us 1 second
 1d0:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
 1d4:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <__data_end+0x1>
 1de:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <__data_end>
		if (overflows == OVERFLOW_MAX) {	
 1e2:	88 3e       	cpi	r24, 0xE8	; 232
 1e4:	93 40       	sbci	r25, 0x03	; 3
 1e6:	41 f4       	brne	.+16     	; 0x1f8 <__vector_14+0x44>
			PORTB ^= (1<<3);	//Toggle the PB3 LED
 1e8:	95 b1       	in	r25, 0x05	; 5
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	89 27       	eor	r24, r25
 1ee:	85 b9       	out	0x05, r24	; 5
			overflows = 0;
 1f0:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
 1f4:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
		}
	}
}	
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <UART_transmit_string>:

void UART_transmit_string(char *data) {
 208:	fc 01       	movw	r30, r24
	while ((*data != '\0')) {	// Check if NULL char
 20a:	07 c0       	rjmp	.+14     	; 0x21a <UART_transmit_string+0x12>
		while (!(UCSR0A & (1 <<UDRE0)));	// Wait for register to be 
 20c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 210:	95 ff       	sbrs	r25, 5
 212:	fc cf       	rjmp	.-8      	; 0x20c <UART_transmit_string+0x4>
		UDR0 = *data;	// Store data in the data register
 214:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		data++;
 218:	31 96       	adiw	r30, 0x01	; 1
		}
	}
}	

void UART_transmit_string(char *data) {
	while ((*data != '\0')) {	// Check if NULL char
 21a:	80 81       	ld	r24, Z
 21c:	81 11       	cpse	r24, r1
 21e:	f6 cf       	rjmp	.-20     	; 0x20c <UART_transmit_string+0x4>
		while (!(UCSR0A & (1 <<UDRE0)));	// Wait for register to be 
		UDR0 = *data;	// Store data in the data register
		data++;
	}
}
 220:	08 95       	ret

00000222 <help_menu>:
	PORTB |= (1<<5); //Turn off PB5 LED
}

void help_menu(void)
{
	UART_transmit_string("***********************************DA4 Help Screen:***********************************\n");
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'h'\t Displays a help screen to lists all keys and functionalities\n");
 22a:	88 e5       	ldi	r24, 0x58	; 88
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'o'\t Turns on LED connected to PB5\n");
 232:	8b e9       	ldi	r24, 0x9B	; 155
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'O'\t Turns off LED connected to PB5\n");
 23a:	8f eb       	ldi	r24, 0xBF	; 191
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'b'\t Blinks the LED connected to PB3 continuously every second\n");
 242:	84 ee       	ldi	r24, 0xE4	; 228
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'P'\t Turns off the LED connected to PB3\n");
 24a:	84 e2       	ldi	r24, 0x24	; 36
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'a'\t Reads and displays the ADC value from the potentiometer connected to AC0/PC0\n");
 252:	8d e4       	ldi	r24, 0x4D	; 77
 254:	92 e0       	ldi	r25, 0x02	; 2
 256:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("\t ^ Please note that the ADC must be stopped before taking other inputs\n");
 25a:	80 ea       	ldi	r24, 0xA0	; 160
 25c:	92 e0       	ldi	r25, 0x02	; 2
 25e:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("'A'\t Stops reading the ADC value from the potentiometer connected to AC0/PC0\n");
 262:	89 ee       	ldi	r24, 0xE9	; 233
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	UART_transmit_string("**************************************************************************************\n\n");
 26a:	87 e3       	ldi	r24, 0x37	; 55
 26c:	93 e0       	ldi	r25, 0x03	; 3
 26e:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
 272:	08 95       	ret

00000274 <__vector_18>:
}

ISR(USART0_RX_vect) 
{
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	4f 93       	push	r20
 284:	5f 93       	push	r21
 286:	6f 93       	push	r22
 288:	7f 93       	push	r23
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
	// Get data from the USART data register
	unsigned char data = UDR0;
 296:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	switch(data)
 29a:	8e 2f       	mov	r24, r30
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	fc 01       	movw	r30, r24
 2a0:	e1 54       	subi	r30, 0x41	; 65
 2a2:	f1 09       	sbc	r31, r1
 2a4:	ef 32       	cpi	r30, 0x2F	; 47
 2a6:	f1 05       	cpc	r31, r1
 2a8:	d8 f5       	brcc	.+118    	; 0x320 <__vector_18+0xac>
 2aa:	e6 5a       	subi	r30, 0xA6	; 166
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__tablejump2__>
	{
		case 'h':
			if (!(ADCSRA & (1 << ADEN)))	// Break if ADC is being read
 2b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2b6:	88 23       	and	r24, r24
 2b8:	9c f1       	brlt	.+102    	; 0x320 <__vector_18+0xac>
				help_menu();
 2ba:	0e 94 11 01 	call	0x222	; 0x222 <help_menu>
 2be:	30 c0       	rjmp	.+96     	; 0x320 <__vector_18+0xac>
			break;
		case 'o':
			if (!(ADCSRA & (1 << ADEN)))	// Break if ADC is being read
 2c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2c4:	88 23       	and	r24, r24
 2c6:	64 f1       	brlt	.+88     	; 0x320 <__vector_18+0xac>
				turn_on_led();
 2c8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <turn_on_led>
 2cc:	29 c0       	rjmp	.+82     	; 0x320 <__vector_18+0xac>
			break;
		case 'O':
			if (!(ADCSRA & (1 << ADEN)))	// Break if ADC is being read
 2ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2d2:	88 23       	and	r24, r24
 2d4:	2c f1       	brlt	.+74     	; 0x320 <__vector_18+0xac>
				turn_off_led();
 2d6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <turn_off_led>
 2da:	22 c0       	rjmp	.+68     	; 0x320 <__vector_18+0xac>
			break;
		case 'b':
			if (!(ADCSRA & (1 << ADEN)))	// Break if ADC is being read
 2dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2e0:	88 23       	and	r24, r24
 2e2:	f4 f0       	brlt	.+60     	; 0x320 <__vector_18+0xac>
			blink_enable = 1;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <blink_enable+0x1>
 2ec:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <blink_enable>
 2f0:	17 c0       	rjmp	.+46     	; 0x320 <__vector_18+0xac>
			break;
		case 'P':
			if (!(ADCSRA & (1 << ADEN)))	// Break if ADC is being read
 2f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2f6:	88 23       	and	r24, r24
 2f8:	24 f0       	brlt	.+8      	; 0x302 <__vector_18+0x8e>
				blink_enable = 0;
 2fa:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <blink_enable+0x1>
 2fe:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <blink_enable>
			PORTB |= (1<<3); //Turn LED off
 302:	85 b1       	in	r24, 0x05	; 5
 304:	88 60       	ori	r24, 0x08	; 8
 306:	85 b9       	out	0x05, r24	; 5
			break;
 308:	0b c0       	rjmp	.+22     	; 0x320 <__vector_18+0xac>
		case 'a':
			ADCSRA |= (1<<ADEN);	// Enable the ADC to start reading potentiometer
 30a:	ea e7       	ldi	r30, 0x7A	; 122
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	80 68       	ori	r24, 0x80	; 128
 312:	80 83       	st	Z, r24
			break;
 314:	05 c0       	rjmp	.+10     	; 0x320 <__vector_18+0xac>
		case 'A':
			ADCSRA &= ~(1<<ADEN);	// Disable the ADC to stop reading potentiometer
 316:	ea e7       	ldi	r30, 0x7A	; 122
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	8f 77       	andi	r24, 0x7F	; 127
 31e:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <read_adc>:
	}
}

void read_adc(void)
{
	ADCSRA |= (1<<ADSC); // Start a conversion
 342:	ea e7       	ldi	r30, 0x7A	; 122
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	80 64       	ori	r24, 0x40	; 64
 34a:	80 83       	st	Z, r24
	adc_temp = ADC;		// Read the raw ADC value
 34c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 350:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 354:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <adc_temp+0x1>
 358:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <adc_temp>
 35c:	08 95       	ret

0000035e <main>:
}


int main(void)
{
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
 366:	c4 56       	subi	r28, 0x64	; 100
 368:	d1 09       	sbc	r29, r1
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);	//Initialize USART
 374:	87 e6       	ldi	r24, 0x67	; 103
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 a8 00 	call	0x150	; 0x150 <UART_init>
	UART_transmit_string("Connected!\n");	//Welcome message
 37c:	80 e9       	ldi	r24, 0x90	; 144
 37e:	93 e0       	ldi	r25, 0x03	; 3
 380:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	timer_init();		//Initialize Timer
 384:	0e 94 b6 00 	call	0x16c	; 0x16c <timer_init>
	led_init();			//Initialize LEDs
 388:	0e 94 c4 00 	call	0x188	; 0x188 <led_init>
	adc_init();			//Initialize ADC
 38c:	0e 94 cb 00 	call	0x196	; 0x196 <adc_init>
	help_menu();		//Print the help menu upon startup/reboot
 390:	0e 94 11 01 	call	0x222	; 0x222 <help_menu>
    
	while (1) {
		if (ADCSRA & (1 << ADEN))	//Check if ADC has been enabled
 394:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 398:	88 23       	and	r24, r24
 39a:	e4 f7       	brge	.-8      	; 0x394 <main+0x36>
		{
			char buffer[100];		//Buffer to read ADC
			read_adc();
 39c:	0e 94 a1 01 	call	0x342	; 0x342 <read_adc>
			uint16_t adc_voltage = adc_temp * ADC_CONVERSION;
 3a0:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <adc_temp>
 3a4:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <adc_temp+0x1>
			sprintf(buffer, "%d mV\r\n", adc_voltage);	//Read the adc value into the buffer
 3a8:	9f 93       	push	r25
 3aa:	8f 93       	push	r24
 3ac:	8c e9       	ldi	r24, 0x9C	; 156
 3ae:	93 e0       	ldi	r25, 0x03	; 3
 3b0:	9f 93       	push	r25
 3b2:	8f 93       	push	r24
 3b4:	8e 01       	movw	r16, r28
 3b6:	0f 5f       	subi	r16, 0xFF	; 255
 3b8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ba:	1f 93       	push	r17
 3bc:	0f 93       	push	r16
 3be:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sprintf>
			UART_transmit_string(buffer);	//Send the adc value to the terminal
 3c2:	c8 01       	movw	r24, r16
 3c4:	0e 94 04 01 	call	0x208	; 0x208 <UART_transmit_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c8:	2f ef       	ldi	r18, 0xFF	; 255
 3ca:	81 ee       	ldi	r24, 0xE1	; 225
 3cc:	94 e0       	ldi	r25, 0x04	; 4
 3ce:	21 50       	subi	r18, 0x01	; 1
 3d0:	80 40       	sbci	r24, 0x00	; 0
 3d2:	90 40       	sbci	r25, 0x00	; 0
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <main+0x70>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0x7a>
 3d8:	00 00       	nop
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	d6 cf       	rjmp	.-84     	; 0x394 <main+0x36>

000003e8 <__tablejump2__>:
 3e8:	ee 0f       	add	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	05 90       	lpm	r0, Z+
 3ee:	f4 91       	lpm	r31, Z
 3f0:	e0 2d       	mov	r30, r0
 3f2:	09 94       	ijmp

000003f4 <sprintf>:
 3f4:	ae e0       	ldi	r26, 0x0E	; 14
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	e0 e0       	ldi	r30, 0x00	; 0
 3fa:	f2 e0       	ldi	r31, 0x02	; 2
 3fc:	0c 94 bb 04 	jmp	0x976	; 0x976 <__prologue_saves__+0x1c>
 400:	0d 89       	ldd	r16, Y+21	; 0x15
 402:	1e 89       	ldd	r17, Y+22	; 0x16
 404:	86 e0       	ldi	r24, 0x06	; 6
 406:	8c 83       	std	Y+4, r24	; 0x04
 408:	1a 83       	std	Y+2, r17	; 0x02
 40a:	09 83       	std	Y+1, r16	; 0x01
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	9f e7       	ldi	r25, 0x7F	; 127
 410:	9e 83       	std	Y+6, r25	; 0x06
 412:	8d 83       	std	Y+5, r24	; 0x05
 414:	ae 01       	movw	r20, r28
 416:	47 5e       	subi	r20, 0xE7	; 231
 418:	5f 4f       	sbci	r21, 0xFF	; 255
 41a:	6f 89       	ldd	r22, Y+23	; 0x17
 41c:	78 8d       	ldd	r23, Y+24	; 0x18
 41e:	ce 01       	movw	r24, r28
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	0e 94 1c 02 	call	0x438	; 0x438 <vfprintf>
 426:	ef 81       	ldd	r30, Y+7	; 0x07
 428:	f8 85       	ldd	r31, Y+8	; 0x08
 42a:	e0 0f       	add	r30, r16
 42c:	f1 1f       	adc	r31, r17
 42e:	10 82       	st	Z, r1
 430:	2e 96       	adiw	r28, 0x0e	; 14
 432:	e4 e0       	ldi	r30, 0x04	; 4
 434:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__epilogue_restores__+0x1c>

00000438 <vfprintf>:
 438:	ab e0       	ldi	r26, 0x0B	; 11
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	e2 e2       	ldi	r30, 0x22	; 34
 43e:	f2 e0       	ldi	r31, 0x02	; 2
 440:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__prologue_saves__>
 444:	6c 01       	movw	r12, r24
 446:	7b 01       	movw	r14, r22
 448:	8a 01       	movw	r16, r20
 44a:	fc 01       	movw	r30, r24
 44c:	17 82       	std	Z+7, r1	; 0x07
 44e:	16 82       	std	Z+6, r1	; 0x06
 450:	83 81       	ldd	r24, Z+3	; 0x03
 452:	81 ff       	sbrs	r24, 1
 454:	cc c1       	rjmp	.+920    	; 0x7ee <vfprintf+0x3b6>
 456:	ce 01       	movw	r24, r28
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	3c 01       	movw	r6, r24
 45c:	f6 01       	movw	r30, r12
 45e:	93 81       	ldd	r25, Z+3	; 0x03
 460:	f7 01       	movw	r30, r14
 462:	93 fd       	sbrc	r25, 3
 464:	85 91       	lpm	r24, Z+
 466:	93 ff       	sbrs	r25, 3
 468:	81 91       	ld	r24, Z+
 46a:	7f 01       	movw	r14, r30
 46c:	88 23       	and	r24, r24
 46e:	09 f4       	brne	.+2      	; 0x472 <vfprintf+0x3a>
 470:	ba c1       	rjmp	.+884    	; 0x7e6 <vfprintf+0x3ae>
 472:	85 32       	cpi	r24, 0x25	; 37
 474:	39 f4       	brne	.+14     	; 0x484 <vfprintf+0x4c>
 476:	93 fd       	sbrc	r25, 3
 478:	85 91       	lpm	r24, Z+
 47a:	93 ff       	sbrs	r25, 3
 47c:	81 91       	ld	r24, Z+
 47e:	7f 01       	movw	r14, r30
 480:	85 32       	cpi	r24, 0x25	; 37
 482:	29 f4       	brne	.+10     	; 0x48e <vfprintf+0x56>
 484:	b6 01       	movw	r22, r12
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 13 04 	call	0x826	; 0x826 <fputc>
 48c:	e7 cf       	rjmp	.-50     	; 0x45c <vfprintf+0x24>
 48e:	91 2c       	mov	r9, r1
 490:	21 2c       	mov	r2, r1
 492:	31 2c       	mov	r3, r1
 494:	ff e1       	ldi	r31, 0x1F	; 31
 496:	f3 15       	cp	r31, r3
 498:	d8 f0       	brcs	.+54     	; 0x4d0 <vfprintf+0x98>
 49a:	8b 32       	cpi	r24, 0x2B	; 43
 49c:	79 f0       	breq	.+30     	; 0x4bc <vfprintf+0x84>
 49e:	38 f4       	brcc	.+14     	; 0x4ae <vfprintf+0x76>
 4a0:	80 32       	cpi	r24, 0x20	; 32
 4a2:	79 f0       	breq	.+30     	; 0x4c2 <vfprintf+0x8a>
 4a4:	83 32       	cpi	r24, 0x23	; 35
 4a6:	a1 f4       	brne	.+40     	; 0x4d0 <vfprintf+0x98>
 4a8:	23 2d       	mov	r18, r3
 4aa:	20 61       	ori	r18, 0x10	; 16
 4ac:	1d c0       	rjmp	.+58     	; 0x4e8 <vfprintf+0xb0>
 4ae:	8d 32       	cpi	r24, 0x2D	; 45
 4b0:	61 f0       	breq	.+24     	; 0x4ca <vfprintf+0x92>
 4b2:	80 33       	cpi	r24, 0x30	; 48
 4b4:	69 f4       	brne	.+26     	; 0x4d0 <vfprintf+0x98>
 4b6:	23 2d       	mov	r18, r3
 4b8:	21 60       	ori	r18, 0x01	; 1
 4ba:	16 c0       	rjmp	.+44     	; 0x4e8 <vfprintf+0xb0>
 4bc:	83 2d       	mov	r24, r3
 4be:	82 60       	ori	r24, 0x02	; 2
 4c0:	38 2e       	mov	r3, r24
 4c2:	e3 2d       	mov	r30, r3
 4c4:	e4 60       	ori	r30, 0x04	; 4
 4c6:	3e 2e       	mov	r3, r30
 4c8:	2a c0       	rjmp	.+84     	; 0x51e <vfprintf+0xe6>
 4ca:	f3 2d       	mov	r31, r3
 4cc:	f8 60       	ori	r31, 0x08	; 8
 4ce:	1d c0       	rjmp	.+58     	; 0x50a <vfprintf+0xd2>
 4d0:	37 fc       	sbrc	r3, 7
 4d2:	2d c0       	rjmp	.+90     	; 0x52e <vfprintf+0xf6>
 4d4:	20 ed       	ldi	r18, 0xD0	; 208
 4d6:	28 0f       	add	r18, r24
 4d8:	2a 30       	cpi	r18, 0x0A	; 10
 4da:	40 f0       	brcs	.+16     	; 0x4ec <vfprintf+0xb4>
 4dc:	8e 32       	cpi	r24, 0x2E	; 46
 4de:	b9 f4       	brne	.+46     	; 0x50e <vfprintf+0xd6>
 4e0:	36 fc       	sbrc	r3, 6
 4e2:	81 c1       	rjmp	.+770    	; 0x7e6 <vfprintf+0x3ae>
 4e4:	23 2d       	mov	r18, r3
 4e6:	20 64       	ori	r18, 0x40	; 64
 4e8:	32 2e       	mov	r3, r18
 4ea:	19 c0       	rjmp	.+50     	; 0x51e <vfprintf+0xe6>
 4ec:	36 fe       	sbrs	r3, 6
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <vfprintf+0xc4>
 4f0:	8a e0       	ldi	r24, 0x0A	; 10
 4f2:	98 9e       	mul	r9, r24
 4f4:	20 0d       	add	r18, r0
 4f6:	11 24       	eor	r1, r1
 4f8:	92 2e       	mov	r9, r18
 4fa:	11 c0       	rjmp	.+34     	; 0x51e <vfprintf+0xe6>
 4fc:	ea e0       	ldi	r30, 0x0A	; 10
 4fe:	2e 9e       	mul	r2, r30
 500:	20 0d       	add	r18, r0
 502:	11 24       	eor	r1, r1
 504:	22 2e       	mov	r2, r18
 506:	f3 2d       	mov	r31, r3
 508:	f0 62       	ori	r31, 0x20	; 32
 50a:	3f 2e       	mov	r3, r31
 50c:	08 c0       	rjmp	.+16     	; 0x51e <vfprintf+0xe6>
 50e:	8c 36       	cpi	r24, 0x6C	; 108
 510:	21 f4       	brne	.+8      	; 0x51a <vfprintf+0xe2>
 512:	83 2d       	mov	r24, r3
 514:	80 68       	ori	r24, 0x80	; 128
 516:	38 2e       	mov	r3, r24
 518:	02 c0       	rjmp	.+4      	; 0x51e <vfprintf+0xe6>
 51a:	88 36       	cpi	r24, 0x68	; 104
 51c:	41 f4       	brne	.+16     	; 0x52e <vfprintf+0xf6>
 51e:	f7 01       	movw	r30, r14
 520:	93 fd       	sbrc	r25, 3
 522:	85 91       	lpm	r24, Z+
 524:	93 ff       	sbrs	r25, 3
 526:	81 91       	ld	r24, Z+
 528:	7f 01       	movw	r14, r30
 52a:	81 11       	cpse	r24, r1
 52c:	b3 cf       	rjmp	.-154    	; 0x494 <vfprintf+0x5c>
 52e:	98 2f       	mov	r25, r24
 530:	9f 7d       	andi	r25, 0xDF	; 223
 532:	95 54       	subi	r25, 0x45	; 69
 534:	93 30       	cpi	r25, 0x03	; 3
 536:	28 f4       	brcc	.+10     	; 0x542 <vfprintf+0x10a>
 538:	0c 5f       	subi	r16, 0xFC	; 252
 53a:	1f 4f       	sbci	r17, 0xFF	; 255
 53c:	9f e3       	ldi	r25, 0x3F	; 63
 53e:	99 83       	std	Y+1, r25	; 0x01
 540:	0d c0       	rjmp	.+26     	; 0x55c <vfprintf+0x124>
 542:	83 36       	cpi	r24, 0x63	; 99
 544:	31 f0       	breq	.+12     	; 0x552 <vfprintf+0x11a>
 546:	83 37       	cpi	r24, 0x73	; 115
 548:	71 f0       	breq	.+28     	; 0x566 <vfprintf+0x12e>
 54a:	83 35       	cpi	r24, 0x53	; 83
 54c:	09 f0       	breq	.+2      	; 0x550 <vfprintf+0x118>
 54e:	59 c0       	rjmp	.+178    	; 0x602 <vfprintf+0x1ca>
 550:	21 c0       	rjmp	.+66     	; 0x594 <vfprintf+0x15c>
 552:	f8 01       	movw	r30, r16
 554:	80 81       	ld	r24, Z
 556:	89 83       	std	Y+1, r24	; 0x01
 558:	0e 5f       	subi	r16, 0xFE	; 254
 55a:	1f 4f       	sbci	r17, 0xFF	; 255
 55c:	88 24       	eor	r8, r8
 55e:	83 94       	inc	r8
 560:	91 2c       	mov	r9, r1
 562:	53 01       	movw	r10, r6
 564:	13 c0       	rjmp	.+38     	; 0x58c <vfprintf+0x154>
 566:	28 01       	movw	r4, r16
 568:	f2 e0       	ldi	r31, 0x02	; 2
 56a:	4f 0e       	add	r4, r31
 56c:	51 1c       	adc	r5, r1
 56e:	f8 01       	movw	r30, r16
 570:	a0 80       	ld	r10, Z
 572:	b1 80       	ldd	r11, Z+1	; 0x01
 574:	36 fe       	sbrs	r3, 6
 576:	03 c0       	rjmp	.+6      	; 0x57e <vfprintf+0x146>
 578:	69 2d       	mov	r22, r9
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <vfprintf+0x14a>
 57e:	6f ef       	ldi	r22, 0xFF	; 255
 580:	7f ef       	ldi	r23, 0xFF	; 255
 582:	c5 01       	movw	r24, r10
 584:	0e 94 08 04 	call	0x810	; 0x810 <strnlen>
 588:	4c 01       	movw	r8, r24
 58a:	82 01       	movw	r16, r4
 58c:	f3 2d       	mov	r31, r3
 58e:	ff 77       	andi	r31, 0x7F	; 127
 590:	3f 2e       	mov	r3, r31
 592:	16 c0       	rjmp	.+44     	; 0x5c0 <vfprintf+0x188>
 594:	28 01       	movw	r4, r16
 596:	22 e0       	ldi	r18, 0x02	; 2
 598:	42 0e       	add	r4, r18
 59a:	51 1c       	adc	r5, r1
 59c:	f8 01       	movw	r30, r16
 59e:	a0 80       	ld	r10, Z
 5a0:	b1 80       	ldd	r11, Z+1	; 0x01
 5a2:	36 fe       	sbrs	r3, 6
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <vfprintf+0x174>
 5a6:	69 2d       	mov	r22, r9
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <vfprintf+0x178>
 5ac:	6f ef       	ldi	r22, 0xFF	; 255
 5ae:	7f ef       	ldi	r23, 0xFF	; 255
 5b0:	c5 01       	movw	r24, r10
 5b2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <strnlen_P>
 5b6:	4c 01       	movw	r8, r24
 5b8:	f3 2d       	mov	r31, r3
 5ba:	f0 68       	ori	r31, 0x80	; 128
 5bc:	3f 2e       	mov	r3, r31
 5be:	82 01       	movw	r16, r4
 5c0:	33 fc       	sbrc	r3, 3
 5c2:	1b c0       	rjmp	.+54     	; 0x5fa <vfprintf+0x1c2>
 5c4:	82 2d       	mov	r24, r2
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	88 16       	cp	r8, r24
 5ca:	99 06       	cpc	r9, r25
 5cc:	b0 f4       	brcc	.+44     	; 0x5fa <vfprintf+0x1c2>
 5ce:	b6 01       	movw	r22, r12
 5d0:	80 e2       	ldi	r24, 0x20	; 32
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 13 04 	call	0x826	; 0x826 <fputc>
 5d8:	2a 94       	dec	r2
 5da:	f4 cf       	rjmp	.-24     	; 0x5c4 <vfprintf+0x18c>
 5dc:	f5 01       	movw	r30, r10
 5de:	37 fc       	sbrc	r3, 7
 5e0:	85 91       	lpm	r24, Z+
 5e2:	37 fe       	sbrs	r3, 7
 5e4:	81 91       	ld	r24, Z+
 5e6:	5f 01       	movw	r10, r30
 5e8:	b6 01       	movw	r22, r12
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 13 04 	call	0x826	; 0x826 <fputc>
 5f0:	21 10       	cpse	r2, r1
 5f2:	2a 94       	dec	r2
 5f4:	21 e0       	ldi	r18, 0x01	; 1
 5f6:	82 1a       	sub	r8, r18
 5f8:	91 08       	sbc	r9, r1
 5fa:	81 14       	cp	r8, r1
 5fc:	91 04       	cpc	r9, r1
 5fe:	71 f7       	brne	.-36     	; 0x5dc <vfprintf+0x1a4>
 600:	e8 c0       	rjmp	.+464    	; 0x7d2 <vfprintf+0x39a>
 602:	84 36       	cpi	r24, 0x64	; 100
 604:	11 f0       	breq	.+4      	; 0x60a <vfprintf+0x1d2>
 606:	89 36       	cpi	r24, 0x69	; 105
 608:	41 f5       	brne	.+80     	; 0x65a <vfprintf+0x222>
 60a:	f8 01       	movw	r30, r16
 60c:	37 fe       	sbrs	r3, 7
 60e:	07 c0       	rjmp	.+14     	; 0x61e <vfprintf+0x1e6>
 610:	60 81       	ld	r22, Z
 612:	71 81       	ldd	r23, Z+1	; 0x01
 614:	82 81       	ldd	r24, Z+2	; 0x02
 616:	93 81       	ldd	r25, Z+3	; 0x03
 618:	0c 5f       	subi	r16, 0xFC	; 252
 61a:	1f 4f       	sbci	r17, 0xFF	; 255
 61c:	08 c0       	rjmp	.+16     	; 0x62e <vfprintf+0x1f6>
 61e:	60 81       	ld	r22, Z
 620:	71 81       	ldd	r23, Z+1	; 0x01
 622:	07 2e       	mov	r0, r23
 624:	00 0c       	add	r0, r0
 626:	88 0b       	sbc	r24, r24
 628:	99 0b       	sbc	r25, r25
 62a:	0e 5f       	subi	r16, 0xFE	; 254
 62c:	1f 4f       	sbci	r17, 0xFF	; 255
 62e:	f3 2d       	mov	r31, r3
 630:	ff 76       	andi	r31, 0x6F	; 111
 632:	3f 2e       	mov	r3, r31
 634:	97 ff       	sbrs	r25, 7
 636:	09 c0       	rjmp	.+18     	; 0x64a <vfprintf+0x212>
 638:	90 95       	com	r25
 63a:	80 95       	com	r24
 63c:	70 95       	com	r23
 63e:	61 95       	neg	r22
 640:	7f 4f       	sbci	r23, 0xFF	; 255
 642:	8f 4f       	sbci	r24, 0xFF	; 255
 644:	9f 4f       	sbci	r25, 0xFF	; 255
 646:	f0 68       	ori	r31, 0x80	; 128
 648:	3f 2e       	mov	r3, r31
 64a:	2a e0       	ldi	r18, 0x0A	; 10
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	a3 01       	movw	r20, r6
 650:	0e 94 4f 04 	call	0x89e	; 0x89e <__ultoa_invert>
 654:	88 2e       	mov	r8, r24
 656:	86 18       	sub	r8, r6
 658:	45 c0       	rjmp	.+138    	; 0x6e4 <vfprintf+0x2ac>
 65a:	85 37       	cpi	r24, 0x75	; 117
 65c:	31 f4       	brne	.+12     	; 0x66a <vfprintf+0x232>
 65e:	23 2d       	mov	r18, r3
 660:	2f 7e       	andi	r18, 0xEF	; 239
 662:	b2 2e       	mov	r11, r18
 664:	2a e0       	ldi	r18, 0x0A	; 10
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	25 c0       	rjmp	.+74     	; 0x6b4 <vfprintf+0x27c>
 66a:	93 2d       	mov	r25, r3
 66c:	99 7f       	andi	r25, 0xF9	; 249
 66e:	b9 2e       	mov	r11, r25
 670:	8f 36       	cpi	r24, 0x6F	; 111
 672:	c1 f0       	breq	.+48     	; 0x6a4 <vfprintf+0x26c>
 674:	18 f4       	brcc	.+6      	; 0x67c <vfprintf+0x244>
 676:	88 35       	cpi	r24, 0x58	; 88
 678:	79 f0       	breq	.+30     	; 0x698 <vfprintf+0x260>
 67a:	b5 c0       	rjmp	.+362    	; 0x7e6 <vfprintf+0x3ae>
 67c:	80 37       	cpi	r24, 0x70	; 112
 67e:	19 f0       	breq	.+6      	; 0x686 <vfprintf+0x24e>
 680:	88 37       	cpi	r24, 0x78	; 120
 682:	21 f0       	breq	.+8      	; 0x68c <vfprintf+0x254>
 684:	b0 c0       	rjmp	.+352    	; 0x7e6 <vfprintf+0x3ae>
 686:	e9 2f       	mov	r30, r25
 688:	e0 61       	ori	r30, 0x10	; 16
 68a:	be 2e       	mov	r11, r30
 68c:	b4 fe       	sbrs	r11, 4
 68e:	0d c0       	rjmp	.+26     	; 0x6aa <vfprintf+0x272>
 690:	fb 2d       	mov	r31, r11
 692:	f4 60       	ori	r31, 0x04	; 4
 694:	bf 2e       	mov	r11, r31
 696:	09 c0       	rjmp	.+18     	; 0x6aa <vfprintf+0x272>
 698:	34 fe       	sbrs	r3, 4
 69a:	0a c0       	rjmp	.+20     	; 0x6b0 <vfprintf+0x278>
 69c:	29 2f       	mov	r18, r25
 69e:	26 60       	ori	r18, 0x06	; 6
 6a0:	b2 2e       	mov	r11, r18
 6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <vfprintf+0x278>
 6a4:	28 e0       	ldi	r18, 0x08	; 8
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <vfprintf+0x27c>
 6aa:	20 e1       	ldi	r18, 0x10	; 16
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <vfprintf+0x27c>
 6b0:	20 e1       	ldi	r18, 0x10	; 16
 6b2:	32 e0       	ldi	r19, 0x02	; 2
 6b4:	f8 01       	movw	r30, r16
 6b6:	b7 fe       	sbrs	r11, 7
 6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <vfprintf+0x290>
 6ba:	60 81       	ld	r22, Z
 6bc:	71 81       	ldd	r23, Z+1	; 0x01
 6be:	82 81       	ldd	r24, Z+2	; 0x02
 6c0:	93 81       	ldd	r25, Z+3	; 0x03
 6c2:	0c 5f       	subi	r16, 0xFC	; 252
 6c4:	1f 4f       	sbci	r17, 0xFF	; 255
 6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <vfprintf+0x29c>
 6c8:	60 81       	ld	r22, Z
 6ca:	71 81       	ldd	r23, Z+1	; 0x01
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 5f       	subi	r16, 0xFE	; 254
 6d2:	1f 4f       	sbci	r17, 0xFF	; 255
 6d4:	a3 01       	movw	r20, r6
 6d6:	0e 94 4f 04 	call	0x89e	; 0x89e <__ultoa_invert>
 6da:	88 2e       	mov	r8, r24
 6dc:	86 18       	sub	r8, r6
 6de:	fb 2d       	mov	r31, r11
 6e0:	ff 77       	andi	r31, 0x7F	; 127
 6e2:	3f 2e       	mov	r3, r31
 6e4:	36 fe       	sbrs	r3, 6
 6e6:	0d c0       	rjmp	.+26     	; 0x702 <vfprintf+0x2ca>
 6e8:	23 2d       	mov	r18, r3
 6ea:	2e 7f       	andi	r18, 0xFE	; 254
 6ec:	a2 2e       	mov	r10, r18
 6ee:	89 14       	cp	r8, r9
 6f0:	58 f4       	brcc	.+22     	; 0x708 <vfprintf+0x2d0>
 6f2:	34 fe       	sbrs	r3, 4
 6f4:	0b c0       	rjmp	.+22     	; 0x70c <vfprintf+0x2d4>
 6f6:	32 fc       	sbrc	r3, 2
 6f8:	09 c0       	rjmp	.+18     	; 0x70c <vfprintf+0x2d4>
 6fa:	83 2d       	mov	r24, r3
 6fc:	8e 7e       	andi	r24, 0xEE	; 238
 6fe:	a8 2e       	mov	r10, r24
 700:	05 c0       	rjmp	.+10     	; 0x70c <vfprintf+0x2d4>
 702:	b8 2c       	mov	r11, r8
 704:	a3 2c       	mov	r10, r3
 706:	03 c0       	rjmp	.+6      	; 0x70e <vfprintf+0x2d6>
 708:	b8 2c       	mov	r11, r8
 70a:	01 c0       	rjmp	.+2      	; 0x70e <vfprintf+0x2d6>
 70c:	b9 2c       	mov	r11, r9
 70e:	a4 fe       	sbrs	r10, 4
 710:	0f c0       	rjmp	.+30     	; 0x730 <vfprintf+0x2f8>
 712:	fe 01       	movw	r30, r28
 714:	e8 0d       	add	r30, r8
 716:	f1 1d       	adc	r31, r1
 718:	80 81       	ld	r24, Z
 71a:	80 33       	cpi	r24, 0x30	; 48
 71c:	21 f4       	brne	.+8      	; 0x726 <vfprintf+0x2ee>
 71e:	9a 2d       	mov	r25, r10
 720:	99 7e       	andi	r25, 0xE9	; 233
 722:	a9 2e       	mov	r10, r25
 724:	09 c0       	rjmp	.+18     	; 0x738 <vfprintf+0x300>
 726:	a2 fe       	sbrs	r10, 2
 728:	06 c0       	rjmp	.+12     	; 0x736 <vfprintf+0x2fe>
 72a:	b3 94       	inc	r11
 72c:	b3 94       	inc	r11
 72e:	04 c0       	rjmp	.+8      	; 0x738 <vfprintf+0x300>
 730:	8a 2d       	mov	r24, r10
 732:	86 78       	andi	r24, 0x86	; 134
 734:	09 f0       	breq	.+2      	; 0x738 <vfprintf+0x300>
 736:	b3 94       	inc	r11
 738:	a3 fc       	sbrc	r10, 3
 73a:	11 c0       	rjmp	.+34     	; 0x75e <vfprintf+0x326>
 73c:	a0 fe       	sbrs	r10, 0
 73e:	06 c0       	rjmp	.+12     	; 0x74c <vfprintf+0x314>
 740:	b2 14       	cp	r11, r2
 742:	88 f4       	brcc	.+34     	; 0x766 <vfprintf+0x32e>
 744:	28 0c       	add	r2, r8
 746:	92 2c       	mov	r9, r2
 748:	9b 18       	sub	r9, r11
 74a:	0e c0       	rjmp	.+28     	; 0x768 <vfprintf+0x330>
 74c:	b2 14       	cp	r11, r2
 74e:	60 f4       	brcc	.+24     	; 0x768 <vfprintf+0x330>
 750:	b6 01       	movw	r22, r12
 752:	80 e2       	ldi	r24, 0x20	; 32
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 13 04 	call	0x826	; 0x826 <fputc>
 75a:	b3 94       	inc	r11
 75c:	f7 cf       	rjmp	.-18     	; 0x74c <vfprintf+0x314>
 75e:	b2 14       	cp	r11, r2
 760:	18 f4       	brcc	.+6      	; 0x768 <vfprintf+0x330>
 762:	2b 18       	sub	r2, r11
 764:	02 c0       	rjmp	.+4      	; 0x76a <vfprintf+0x332>
 766:	98 2c       	mov	r9, r8
 768:	21 2c       	mov	r2, r1
 76a:	a4 fe       	sbrs	r10, 4
 76c:	10 c0       	rjmp	.+32     	; 0x78e <vfprintf+0x356>
 76e:	b6 01       	movw	r22, r12
 770:	80 e3       	ldi	r24, 0x30	; 48
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 13 04 	call	0x826	; 0x826 <fputc>
 778:	a2 fe       	sbrs	r10, 2
 77a:	17 c0       	rjmp	.+46     	; 0x7aa <vfprintf+0x372>
 77c:	a1 fc       	sbrc	r10, 1
 77e:	03 c0       	rjmp	.+6      	; 0x786 <vfprintf+0x34e>
 780:	88 e7       	ldi	r24, 0x78	; 120
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <vfprintf+0x352>
 786:	88 e5       	ldi	r24, 0x58	; 88
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	b6 01       	movw	r22, r12
 78c:	0c c0       	rjmp	.+24     	; 0x7a6 <vfprintf+0x36e>
 78e:	8a 2d       	mov	r24, r10
 790:	86 78       	andi	r24, 0x86	; 134
 792:	59 f0       	breq	.+22     	; 0x7aa <vfprintf+0x372>
 794:	a1 fe       	sbrs	r10, 1
 796:	02 c0       	rjmp	.+4      	; 0x79c <vfprintf+0x364>
 798:	8b e2       	ldi	r24, 0x2B	; 43
 79a:	01 c0       	rjmp	.+2      	; 0x79e <vfprintf+0x366>
 79c:	80 e2       	ldi	r24, 0x20	; 32
 79e:	a7 fc       	sbrc	r10, 7
 7a0:	8d e2       	ldi	r24, 0x2D	; 45
 7a2:	b6 01       	movw	r22, r12
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 13 04 	call	0x826	; 0x826 <fputc>
 7aa:	89 14       	cp	r8, r9
 7ac:	38 f4       	brcc	.+14     	; 0x7bc <vfprintf+0x384>
 7ae:	b6 01       	movw	r22, r12
 7b0:	80 e3       	ldi	r24, 0x30	; 48
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 13 04 	call	0x826	; 0x826 <fputc>
 7b8:	9a 94       	dec	r9
 7ba:	f7 cf       	rjmp	.-18     	; 0x7aa <vfprintf+0x372>
 7bc:	8a 94       	dec	r8
 7be:	f3 01       	movw	r30, r6
 7c0:	e8 0d       	add	r30, r8
 7c2:	f1 1d       	adc	r31, r1
 7c4:	80 81       	ld	r24, Z
 7c6:	b6 01       	movw	r22, r12
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 13 04 	call	0x826	; 0x826 <fputc>
 7ce:	81 10       	cpse	r8, r1
 7d0:	f5 cf       	rjmp	.-22     	; 0x7bc <vfprintf+0x384>
 7d2:	22 20       	and	r2, r2
 7d4:	09 f4       	brne	.+2      	; 0x7d8 <vfprintf+0x3a0>
 7d6:	42 ce       	rjmp	.-892    	; 0x45c <vfprintf+0x24>
 7d8:	b6 01       	movw	r22, r12
 7da:	80 e2       	ldi	r24, 0x20	; 32
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 13 04 	call	0x826	; 0x826 <fputc>
 7e2:	2a 94       	dec	r2
 7e4:	f6 cf       	rjmp	.-20     	; 0x7d2 <vfprintf+0x39a>
 7e6:	f6 01       	movw	r30, r12
 7e8:	86 81       	ldd	r24, Z+6	; 0x06
 7ea:	97 81       	ldd	r25, Z+7	; 0x07
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <vfprintf+0x3ba>
 7ee:	8f ef       	ldi	r24, 0xFF	; 255
 7f0:	9f ef       	ldi	r25, 0xFF	; 255
 7f2:	2b 96       	adiw	r28, 0x0b	; 11
 7f4:	e2 e1       	ldi	r30, 0x12	; 18
 7f6:	0c 94 c9 04 	jmp	0x992	; 0x992 <__epilogue_restores__>

000007fa <strnlen_P>:
 7fa:	fc 01       	movw	r30, r24
 7fc:	05 90       	lpm	r0, Z+
 7fe:	61 50       	subi	r22, 0x01	; 1
 800:	70 40       	sbci	r23, 0x00	; 0
 802:	01 10       	cpse	r0, r1
 804:	d8 f7       	brcc	.-10     	; 0x7fc <strnlen_P+0x2>
 806:	80 95       	com	r24
 808:	90 95       	com	r25
 80a:	8e 0f       	add	r24, r30
 80c:	9f 1f       	adc	r25, r31
 80e:	08 95       	ret

00000810 <strnlen>:
 810:	fc 01       	movw	r30, r24
 812:	61 50       	subi	r22, 0x01	; 1
 814:	70 40       	sbci	r23, 0x00	; 0
 816:	01 90       	ld	r0, Z+
 818:	01 10       	cpse	r0, r1
 81a:	d8 f7       	brcc	.-10     	; 0x812 <strnlen+0x2>
 81c:	80 95       	com	r24
 81e:	90 95       	com	r25
 820:	8e 0f       	add	r24, r30
 822:	9f 1f       	adc	r25, r31
 824:	08 95       	ret

00000826 <fputc>:
 826:	0f 93       	push	r16
 828:	1f 93       	push	r17
 82a:	cf 93       	push	r28
 82c:	df 93       	push	r29
 82e:	fb 01       	movw	r30, r22
 830:	23 81       	ldd	r18, Z+3	; 0x03
 832:	21 fd       	sbrc	r18, 1
 834:	03 c0       	rjmp	.+6      	; 0x83c <fputc+0x16>
 836:	8f ef       	ldi	r24, 0xFF	; 255
 838:	9f ef       	ldi	r25, 0xFF	; 255
 83a:	2c c0       	rjmp	.+88     	; 0x894 <fputc+0x6e>
 83c:	22 ff       	sbrs	r18, 2
 83e:	16 c0       	rjmp	.+44     	; 0x86c <fputc+0x46>
 840:	46 81       	ldd	r20, Z+6	; 0x06
 842:	57 81       	ldd	r21, Z+7	; 0x07
 844:	24 81       	ldd	r18, Z+4	; 0x04
 846:	35 81       	ldd	r19, Z+5	; 0x05
 848:	42 17       	cp	r20, r18
 84a:	53 07       	cpc	r21, r19
 84c:	44 f4       	brge	.+16     	; 0x85e <fputc+0x38>
 84e:	a0 81       	ld	r26, Z
 850:	b1 81       	ldd	r27, Z+1	; 0x01
 852:	9d 01       	movw	r18, r26
 854:	2f 5f       	subi	r18, 0xFF	; 255
 856:	3f 4f       	sbci	r19, 0xFF	; 255
 858:	31 83       	std	Z+1, r19	; 0x01
 85a:	20 83       	st	Z, r18
 85c:	8c 93       	st	X, r24
 85e:	26 81       	ldd	r18, Z+6	; 0x06
 860:	37 81       	ldd	r19, Z+7	; 0x07
 862:	2f 5f       	subi	r18, 0xFF	; 255
 864:	3f 4f       	sbci	r19, 0xFF	; 255
 866:	37 83       	std	Z+7, r19	; 0x07
 868:	26 83       	std	Z+6, r18	; 0x06
 86a:	14 c0       	rjmp	.+40     	; 0x894 <fputc+0x6e>
 86c:	8b 01       	movw	r16, r22
 86e:	ec 01       	movw	r28, r24
 870:	fb 01       	movw	r30, r22
 872:	00 84       	ldd	r0, Z+8	; 0x08
 874:	f1 85       	ldd	r31, Z+9	; 0x09
 876:	e0 2d       	mov	r30, r0
 878:	09 95       	icall
 87a:	89 2b       	or	r24, r25
 87c:	e1 f6       	brne	.-72     	; 0x836 <fputc+0x10>
 87e:	d8 01       	movw	r26, r16
 880:	16 96       	adiw	r26, 0x06	; 6
 882:	8d 91       	ld	r24, X+
 884:	9c 91       	ld	r25, X
 886:	17 97       	sbiw	r26, 0x07	; 7
 888:	01 96       	adiw	r24, 0x01	; 1
 88a:	17 96       	adiw	r26, 0x07	; 7
 88c:	9c 93       	st	X, r25
 88e:	8e 93       	st	-X, r24
 890:	16 97       	sbiw	r26, 0x06	; 6
 892:	ce 01       	movw	r24, r28
 894:	df 91       	pop	r29
 896:	cf 91       	pop	r28
 898:	1f 91       	pop	r17
 89a:	0f 91       	pop	r16
 89c:	08 95       	ret

0000089e <__ultoa_invert>:
 89e:	fa 01       	movw	r30, r20
 8a0:	aa 27       	eor	r26, r26
 8a2:	28 30       	cpi	r18, 0x08	; 8
 8a4:	51 f1       	breq	.+84     	; 0x8fa <__ultoa_invert+0x5c>
 8a6:	20 31       	cpi	r18, 0x10	; 16
 8a8:	81 f1       	breq	.+96     	; 0x90a <__stack+0xb>
 8aa:	e8 94       	clt
 8ac:	6f 93       	push	r22
 8ae:	6e 7f       	andi	r22, 0xFE	; 254
 8b0:	6e 5f       	subi	r22, 0xFE	; 254
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	af 4f       	sbci	r26, 0xFF	; 255
 8ba:	b1 e0       	ldi	r27, 0x01	; 1
 8bc:	3e d0       	rcall	.+124    	; 0x93a <__stack+0x3b>
 8be:	b4 e0       	ldi	r27, 0x04	; 4
 8c0:	3c d0       	rcall	.+120    	; 0x93a <__stack+0x3b>
 8c2:	67 0f       	add	r22, r23
 8c4:	78 1f       	adc	r23, r24
 8c6:	89 1f       	adc	r24, r25
 8c8:	9a 1f       	adc	r25, r26
 8ca:	a1 1d       	adc	r26, r1
 8cc:	68 0f       	add	r22, r24
 8ce:	79 1f       	adc	r23, r25
 8d0:	8a 1f       	adc	r24, r26
 8d2:	91 1d       	adc	r25, r1
 8d4:	a1 1d       	adc	r26, r1
 8d6:	6a 0f       	add	r22, r26
 8d8:	71 1d       	adc	r23, r1
 8da:	81 1d       	adc	r24, r1
 8dc:	91 1d       	adc	r25, r1
 8de:	a1 1d       	adc	r26, r1
 8e0:	20 d0       	rcall	.+64     	; 0x922 <__stack+0x23>
 8e2:	09 f4       	brne	.+2      	; 0x8e6 <__ultoa_invert+0x48>
 8e4:	68 94       	set
 8e6:	3f 91       	pop	r19
 8e8:	2a e0       	ldi	r18, 0x0A	; 10
 8ea:	26 9f       	mul	r18, r22
 8ec:	11 24       	eor	r1, r1
 8ee:	30 19       	sub	r19, r0
 8f0:	30 5d       	subi	r19, 0xD0	; 208
 8f2:	31 93       	st	Z+, r19
 8f4:	de f6       	brtc	.-74     	; 0x8ac <__ultoa_invert+0xe>
 8f6:	cf 01       	movw	r24, r30
 8f8:	08 95       	ret
 8fa:	46 2f       	mov	r20, r22
 8fc:	47 70       	andi	r20, 0x07	; 7
 8fe:	40 5d       	subi	r20, 0xD0	; 208
 900:	41 93       	st	Z+, r20
 902:	b3 e0       	ldi	r27, 0x03	; 3
 904:	0f d0       	rcall	.+30     	; 0x924 <__stack+0x25>
 906:	c9 f7       	brne	.-14     	; 0x8fa <__ultoa_invert+0x5c>
 908:	f6 cf       	rjmp	.-20     	; 0x8f6 <__ultoa_invert+0x58>
 90a:	46 2f       	mov	r20, r22
 90c:	4f 70       	andi	r20, 0x0F	; 15
 90e:	40 5d       	subi	r20, 0xD0	; 208
 910:	4a 33       	cpi	r20, 0x3A	; 58
 912:	18 f0       	brcs	.+6      	; 0x91a <__stack+0x1b>
 914:	49 5d       	subi	r20, 0xD9	; 217
 916:	31 fd       	sbrc	r19, 1
 918:	40 52       	subi	r20, 0x20	; 32
 91a:	41 93       	st	Z+, r20
 91c:	02 d0       	rcall	.+4      	; 0x922 <__stack+0x23>
 91e:	a9 f7       	brne	.-22     	; 0x90a <__stack+0xb>
 920:	ea cf       	rjmp	.-44     	; 0x8f6 <__ultoa_invert+0x58>
 922:	b4 e0       	ldi	r27, 0x04	; 4
 924:	a6 95       	lsr	r26
 926:	97 95       	ror	r25
 928:	87 95       	ror	r24
 92a:	77 95       	ror	r23
 92c:	67 95       	ror	r22
 92e:	ba 95       	dec	r27
 930:	c9 f7       	brne	.-14     	; 0x924 <__stack+0x25>
 932:	00 97       	sbiw	r24, 0x00	; 0
 934:	61 05       	cpc	r22, r1
 936:	71 05       	cpc	r23, r1
 938:	08 95       	ret
 93a:	9b 01       	movw	r18, r22
 93c:	ac 01       	movw	r20, r24
 93e:	0a 2e       	mov	r0, r26
 940:	06 94       	lsr	r0
 942:	57 95       	ror	r21
 944:	47 95       	ror	r20
 946:	37 95       	ror	r19
 948:	27 95       	ror	r18
 94a:	ba 95       	dec	r27
 94c:	c9 f7       	brne	.-14     	; 0x940 <__stack+0x41>
 94e:	62 0f       	add	r22, r18
 950:	73 1f       	adc	r23, r19
 952:	84 1f       	adc	r24, r20
 954:	95 1f       	adc	r25, r21
 956:	a0 1d       	adc	r26, r0
 958:	08 95       	ret

0000095a <__prologue_saves__>:
 95a:	2f 92       	push	r2
 95c:	3f 92       	push	r3
 95e:	4f 92       	push	r4
 960:	5f 92       	push	r5
 962:	6f 92       	push	r6
 964:	7f 92       	push	r7
 966:	8f 92       	push	r8
 968:	9f 92       	push	r9
 96a:	af 92       	push	r10
 96c:	bf 92       	push	r11
 96e:	cf 92       	push	r12
 970:	df 92       	push	r13
 972:	ef 92       	push	r14
 974:	ff 92       	push	r15
 976:	0f 93       	push	r16
 978:	1f 93       	push	r17
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
 97e:	cd b7       	in	r28, 0x3d	; 61
 980:	de b7       	in	r29, 0x3e	; 62
 982:	ca 1b       	sub	r28, r26
 984:	db 0b       	sbc	r29, r27
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	f8 94       	cli
 98a:	de bf       	out	0x3e, r29	; 62
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	cd bf       	out	0x3d, r28	; 61
 990:	09 94       	ijmp

00000992 <__epilogue_restores__>:
 992:	2a 88       	ldd	r2, Y+18	; 0x12
 994:	39 88       	ldd	r3, Y+17	; 0x11
 996:	48 88       	ldd	r4, Y+16	; 0x10
 998:	5f 84       	ldd	r5, Y+15	; 0x0f
 99a:	6e 84       	ldd	r6, Y+14	; 0x0e
 99c:	7d 84       	ldd	r7, Y+13	; 0x0d
 99e:	8c 84       	ldd	r8, Y+12	; 0x0c
 9a0:	9b 84       	ldd	r9, Y+11	; 0x0b
 9a2:	aa 84       	ldd	r10, Y+10	; 0x0a
 9a4:	b9 84       	ldd	r11, Y+9	; 0x09
 9a6:	c8 84       	ldd	r12, Y+8	; 0x08
 9a8:	df 80       	ldd	r13, Y+7	; 0x07
 9aa:	ee 80       	ldd	r14, Y+6	; 0x06
 9ac:	fd 80       	ldd	r15, Y+5	; 0x05
 9ae:	0c 81       	ldd	r16, Y+4	; 0x04
 9b0:	1b 81       	ldd	r17, Y+3	; 0x03
 9b2:	aa 81       	ldd	r26, Y+2	; 0x02
 9b4:	b9 81       	ldd	r27, Y+1	; 0x01
 9b6:	ce 0f       	add	r28, r30
 9b8:	d1 1d       	adc	r29, r1
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	f8 94       	cli
 9be:	de bf       	out	0x3e, r29	; 62
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	cd bf       	out	0x3d, r28	; 61
 9c4:	ed 01       	movw	r28, r26
 9c6:	08 95       	ret

000009c8 <_exit>:
 9c8:	f8 94       	cli

000009ca <__stop_program>:
 9ca:	ff cf       	rjmp	.-2      	; 0x9ca <__stop_program>
